
RTOS_Thread_F207ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005614  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080057a4  080057a4  000157a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800582c  0800582c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005834  08005834  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800583c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dfc  20000010  0800584c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e0c  0800584c  00024e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a109  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030e1  00000000  00000000  0003a142  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001590  00000000  00000000  0003d228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001438  00000000  00000000  0003e7b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ee8  00000000  00000000  0003fbf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010f4b  00000000  00000000  00042ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd1e8  00000000  00000000  00053a23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120c0b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c30  00000000  00000000  00120c88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800578c 	.word	0x0800578c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800578c 	.word	0x0800578c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	4604      	mov	r4, r0
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0c03 	orr.w	ip, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	fbbc f7fe 	udiv	r7, ip, lr
 8000236:	fa1f f885 	uxth.w	r8, r5
 800023a:	fb0e c317 	mls	r3, lr, r7, ip
 800023e:	fb07 f908 	mul.w	r9, r7, r8
 8000242:	0c21      	lsrs	r1, r4, #16
 8000244:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000248:	4599      	cmp	r9, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000252:	f080 811c 	bcs.w	800048e <__udivmoddi4+0x28e>
 8000256:	4599      	cmp	r9, r3
 8000258:	f240 8119 	bls.w	800048e <__udivmoddi4+0x28e>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	eba3 0309 	sub.w	r3, r3, r9
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	fb00 f108 	mul.w	r1, r0, r8
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000276:	42a1      	cmp	r1, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	192c      	adds	r4, r5, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8107 	bcs.w	8000492 <__udivmoddi4+0x292>
 8000284:	42a1      	cmp	r1, r4
 8000286:	f240 8104 	bls.w	8000492 <__udivmoddi4+0x292>
 800028a:	3802      	subs	r0, #2
 800028c:	442c      	add	r4, r5
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	2700      	movs	r7, #0
 8000294:	1a64      	subs	r4, r4, r1
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	2300      	movs	r3, #0
 800029a:	40d4      	lsrs	r4, r2
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ec 	beq.w	8000488 <__udivmoddi4+0x288>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fb 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469c      	mov	ip, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	2701      	movs	r7, #1
 80002f4:	1b49      	subs	r1, r1, r5
 80002f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fa:	fa1f f985 	uxth.w	r9, r5
 80002fe:	fbb1 fef8 	udiv	lr, r1, r8
 8000302:	fb08 111e 	mls	r1, r8, lr, r1
 8000306:	fb09 f00e 	mul.w	r0, r9, lr
 800030a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800030e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000312:	4298      	cmp	r0, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x126>
 8000316:	18eb      	adds	r3, r5, r3
 8000318:	f10e 31ff 	add.w	r1, lr, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x124>
 800031e:	4298      	cmp	r0, r3
 8000320:	f200 80cd 	bhi.w	80004be <__udivmoddi4+0x2be>
 8000324:	468e      	mov	lr, r1
 8000326:	1a1b      	subs	r3, r3, r0
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	fb09 f900 	mul.w	r9, r9, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033a:	45a1      	cmp	r9, r4
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x14e>
 800033e:	192c      	adds	r4, r5, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f200 80b6 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 800034c:	4618      	mov	r0, r3
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x96>
 8000358:	f1c7 0520 	rsb	r5, r7, #32
 800035c:	40bb      	lsls	r3, r7
 800035e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa21 f405 	lsr.w	r4, r1, r5
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000372:	fa1f f88c 	uxth.w	r8, ip
 8000376:	fb0e 4419 	mls	r4, lr, r9, r4
 800037a:	fa20 f305 	lsr.w	r3, r0, r5
 800037e:	40b9      	lsls	r1, r7
 8000380:	fb09 fa08 	mul.w	sl, r9, r8
 8000384:	4319      	orrs	r1, r3
 8000386:	0c0b      	lsrs	r3, r1, #16
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	45a2      	cmp	sl, r4
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f307 	lsl.w	r3, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	45a2      	cmp	sl, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	eba4 040a 	sub.w	r4, r4, sl
 80003b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003bc:	fb00 fa08 	mul.w	sl, r0, r8
 80003c0:	b289      	uxth	r1, r1
 80003c2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x1dc>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	d26b      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d969      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d8:	3802      	subs	r0, #2
 80003da:	4464      	add	r4, ip
 80003dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e0:	fba0 8902 	umull	r8, r9, r0, r2
 80003e4:	eba4 040a 	sub.w	r4, r4, sl
 80003e8:	454c      	cmp	r4, r9
 80003ea:	4641      	mov	r1, r8
 80003ec:	46ce      	mov	lr, r9
 80003ee:	d354      	bcc.n	800049a <__udivmoddi4+0x29a>
 80003f0:	d051      	beq.n	8000496 <__udivmoddi4+0x296>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d069      	beq.n	80004ca <__udivmoddi4+0x2ca>
 80003f6:	1a5a      	subs	r2, r3, r1
 80003f8:	eb64 040e 	sbc.w	r4, r4, lr
 80003fc:	fa04 f505 	lsl.w	r5, r4, r5
 8000400:	fa22 f307 	lsr.w	r3, r2, r7
 8000404:	40fc      	lsrs	r4, r7
 8000406:	431d      	orrs	r5, r3
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	4095      	lsls	r5, r2
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	fa21 f003 	lsr.w	r0, r1, r3
 800041a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800041e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000422:	fa1f f985 	uxth.w	r9, r5
 8000426:	fb08 0017 	mls	r0, r8, r7, r0
 800042a:	fa24 f303 	lsr.w	r3, r4, r3
 800042e:	4091      	lsls	r1, r2
 8000430:	fb07 fc09 	mul.w	ip, r7, r9
 8000434:	430b      	orrs	r3, r1
 8000436:	0c19      	lsrs	r1, r3, #16
 8000438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043c:	458c      	cmp	ip, r1
 800043e:	fa04 f402 	lsl.w	r4, r4, r2
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x254>
 8000444:	1869      	adds	r1, r5, r1
 8000446:	f107 30ff 	add.w	r0, r7, #4294967295
 800044a:	d231      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 800044c:	458c      	cmp	ip, r1
 800044e:	d92f      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	3f02      	subs	r7, #2
 8000452:	4429      	add	r1, r5
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	fbb1 f0f8 	udiv	r0, r1, r8
 800045c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000460:	fb00 fe09 	mul.w	lr, r0, r9
 8000464:	b299      	uxth	r1, r3
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	458e      	cmp	lr, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d218      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000476:	458e      	cmp	lr, r1
 8000478:	d916      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000486:	e73a      	b.n	80002fe <__udivmoddi4+0xfe>
 8000488:	4637      	mov	r7, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e708      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048e:	460f      	mov	r7, r1
 8000490:	e6e6      	b.n	8000260 <__udivmoddi4+0x60>
 8000492:	4618      	mov	r0, r3
 8000494:	e6fb      	b.n	800028e <__udivmoddi4+0x8e>
 8000496:	4543      	cmp	r3, r8
 8000498:	d2ab      	bcs.n	80003f2 <__udivmoddi4+0x1f2>
 800049a:	ebb8 0102 	subs.w	r1, r8, r2
 800049e:	eb69 020c 	sbc.w	r2, r9, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	4696      	mov	lr, r2
 80004a6:	e7a4      	b.n	80003f2 <__udivmoddi4+0x1f2>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e7e8      	b.n	800047e <__udivmoddi4+0x27e>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e795      	b.n	80003dc <__udivmoddi4+0x1dc>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e7cf      	b.n	8000454 <__udivmoddi4+0x254>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	442c      	add	r4, r5
 80004bc:	e747      	b.n	800034e <__udivmoddi4+0x14e>
 80004be:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c2:	442b      	add	r3, r5
 80004c4:	e72f      	b.n	8000326 <__udivmoddi4+0x126>
 80004c6:	4638      	mov	r0, r7
 80004c8:	e707      	b.n	80002da <__udivmoddi4+0xda>
 80004ca:	4637      	mov	r7, r6
 80004cc:	e6e8      	b.n	80002a0 <__udivmoddi4+0xa0>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004d8:	f000 fb9e 	bl	8000c18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004dc:	f000 f828 	bl	8000530 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004e0:	f000 f8c2 	bl	8000668 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80004e4:	f000 f86c 	bl	80005c0 <MX_USART3_UART_Init>
	MX_USB_OTG_FS_PCD_Init();
 80004e8:	f000 f894 	bl	8000614 <MX_USB_OTG_FS_PCD_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80004ec:	f002 fad0 	bl	8002a90 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of THREAD1 */
	THREAD1Handle = osThreadNew(LED_Thread1, NULL, &THREAD1_attributes);
 80004f0:	4a09      	ldr	r2, [pc, #36]	; (8000518 <main+0x44>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <main+0x48>)
 80004f6:	f002 fb59 	bl	8002bac <osThreadNew>
 80004fa:	4602      	mov	r2, r0
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <main+0x4c>)
 80004fe:	601a      	str	r2, [r3, #0]

	/* creation of THREAD2 */
	THREAD2Handle = osThreadNew(LED_Thread2, NULL, &THREAD2_attributes);
 8000500:	4a08      	ldr	r2, [pc, #32]	; (8000524 <main+0x50>)
 8000502:	2100      	movs	r1, #0
 8000504:	4808      	ldr	r0, [pc, #32]	; (8000528 <main+0x54>)
 8000506:	f002 fb51 	bl	8002bac <osThreadNew>
 800050a:	4602      	mov	r2, r0
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <main+0x58>)
 800050e:	601a      	str	r2, [r3, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000510:	f002 faf0 	bl	8002af4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000514:	e7fe      	b.n	8000514 <main+0x40>
 8000516:	bf00      	nop
 8000518:	080057cc 	.word	0x080057cc
 800051c:	080007e5 	.word	0x080007e5
 8000520:	20004d78 	.word	0x20004d78
 8000524:	080057f0 	.word	0x080057f0
 8000528:	08000889 	.word	0x08000889
 800052c:	20004d7c 	.word	0x20004d7c

08000530 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b092      	sub	sp, #72	; 0x48
 8000534:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 8000536:	f107 0318 	add.w	r3, r7, #24
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f005 f91b 	bl	800577a <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000556:	2301      	movs	r3, #1
 8000558:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055a:	2310      	movs	r3, #16
 800055c:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800055e:	2302      	movs	r3, #2
 8000560:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000562:	2300      	movs	r3, #0
 8000564:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = 13;
 8000566:	230d      	movs	r3, #13
 8000568:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 195;
 800056a:	23c3      	movs	r3, #195	; 0xc3
 800056c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800056e:	2302      	movs	r3, #2
 8000570:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ = 5;
 8000572:	2305      	movs	r3, #5
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	4618      	mov	r0, r3
 800057c:	f000 ff78 	bl	8001470 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x5a>
	{
		Error_Handler();
 8000586:	f000 f9cb 	bl	8000920 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	2302      	movs	r3, #2
 8000590:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000596:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800059a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800059c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2103      	movs	r1, #3
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 f9b2 	bl	8001910 <HAL_RCC_ClockConfig>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <SystemClock_Config+0x86>
	{
		Error_Handler();
 80005b2:	f000 f9b5 	bl	8000920 <Error_Handler>
	}
}
 80005b6:	bf00      	nop
 80005b8:	3748      	adds	r7, #72	; 0x48
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
	...

080005c0 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <MX_USART3_UART_Init+0x50>)
 80005c8:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b0e      	ldr	r3, [pc, #56]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0b      	ldr	r3, [pc, #44]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b09      	ldr	r3, [pc, #36]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80005f6:	4805      	ldr	r0, [pc, #20]	; (800060c <MX_USART3_UART_Init+0x4c>)
 80005f8:	f001 fe6e 	bl	80022d8 <HAL_UART_Init>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8000602:	f000 f98d 	bl	8000920 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20004938 	.word	0x20004938
 8000610:	40004800 	.word	0x40004800

08000614 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800061a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800061e:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000620:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000622:	2204      	movs	r2, #4
 8000624:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000628:	2202      	movs	r2, #2
 800062a:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000634:	2202      	movs	r2, #2
 8000636:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000638:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000644:	4b07      	ldr	r3, [pc, #28]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000646:	2201      	movs	r2, #1
 8000648:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800064a:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000652:	f000 fdf0 	bl	8001236 <HAL_PCD_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_USB_OTG_FS_PCD_Init+0x4c>
	{
		Error_Handler();
 800065c:	f000 f960 	bl	8000920 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20004978 	.word	0x20004978

08000668 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08c      	sub	sp, #48	; 0x30
 800066c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
 8000682:	4b53      	ldr	r3, [pc, #332]	; (80007d0 <MX_GPIO_Init+0x168>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a52      	ldr	r2, [pc, #328]	; (80007d0 <MX_GPIO_Init+0x168>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b50      	ldr	r3, [pc, #320]	; (80007d0 <MX_GPIO_Init+0x168>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	61bb      	str	r3, [r7, #24]
 8000698:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
 800069e:	4b4c      	ldr	r3, [pc, #304]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a4b      	ldr	r2, [pc, #300]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b49      	ldr	r3, [pc, #292]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	617b      	str	r3, [r7, #20]
 80006b4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
 80006ba:	4b45      	ldr	r3, [pc, #276]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a44      	ldr	r2, [pc, #272]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b42      	ldr	r3, [pc, #264]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	4b3e      	ldr	r3, [pc, #248]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a3d      	ldr	r2, [pc, #244]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006dc:	f043 0308 	orr.w	r3, r3, #8
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b3b      	ldr	r3, [pc, #236]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	4b37      	ldr	r3, [pc, #220]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a36      	ldr	r2, [pc, #216]	; (80007d0 <MX_GPIO_Init+0x168>)
 80006f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b34      	ldr	r3, [pc, #208]	; (80007d0 <MX_GPIO_Init+0x168>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000706:	60bb      	str	r3, [r7, #8]
 8000708:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b30      	ldr	r3, [pc, #192]	; (80007d0 <MX_GPIO_Init+0x168>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a2f      	ldr	r2, [pc, #188]	; (80007d0 <MX_GPIO_Init+0x168>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b2d      	ldr	r3, [pc, #180]	; (80007d0 <MX_GPIO_Init+0x168>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8000726:	2200      	movs	r2, #0
 8000728:	f244 0181 	movw	r1, #16513	; 0x4081
 800072c:	4829      	ldr	r0, [pc, #164]	; (80007d4 <MX_GPIO_Init+0x16c>)
 800072e:	f000 fd51 	bl	80011d4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin,
 8000732:	2200      	movs	r2, #0
 8000734:	2140      	movs	r1, #64	; 0x40
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <MX_GPIO_Init+0x170>)
 8000738:	f000 fd4c 	bl	80011d4 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : USER_Btn_Pin */
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 800073c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000740:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000742:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_GPIO_Init+0x174>)
 8000744:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4619      	mov	r1, r3
 8000750:	4823      	ldr	r0, [pc, #140]	; (80007e0 <MX_GPIO_Init+0x178>)
 8000752:	f000 fba1 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_MDC_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin;
 8000756:	2302      	movs	r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000766:	230b      	movs	r3, #11
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(RMII_MDC_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	481b      	ldr	r0, [pc, #108]	; (80007e0 <MX_GPIO_Init+0x178>)
 8000772:	f000 fb91 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8000776:	f244 0381 	movw	r3, #16513	; 0x4081
 800077a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077c:	2301      	movs	r3, #1
 800077e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000780:	2300      	movs	r3, #0
 8000782:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	2300      	movs	r3, #0
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4619      	mov	r1, r3
 800078e:	4811      	ldr	r0, [pc, #68]	; (80007d4 <MX_GPIO_Init+0x16c>)
 8000790:	f000 fb82 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	480b      	ldr	r0, [pc, #44]	; (80007d8 <MX_GPIO_Init+0x170>)
 80007ac:	f000 fb74 	bl	8000e98 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OverCurrent_Pin */
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007b0:	2380      	movs	r3, #128	; 0x80
 80007b2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_GPIO_Init+0x170>)
 80007c4:	f000 fb68 	bl	8000e98 <HAL_GPIO_Init>

}
 80007c8:	bf00      	nop
 80007ca:	3730      	adds	r7, #48	; 0x30
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020400 	.word	0x40020400
 80007d8:	40021800 	.word	0x40021800
 80007dc:	10110000 	.word	0x10110000
 80007e0:	40020800 	.word	0x40020800

080007e4 <LED_Thread1>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LED_Thread1 */
void LED_Thread1(void *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint32_t count = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
	(void) argument;
	/* Infinite loop */
	for (;;)
	{
		count = osKernelGetTickCount() + 5000;
 80007f0:	f002 f9b4 	bl	8002b5c <osKernelGetTickCount>
 80007f4:	4603      	mov	r3, r0
 80007f6:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80007fa:	3308      	adds	r3, #8
 80007fc:	60fb      	str	r3, [r7, #12]

		/* Toggle LED1 every 200 ms for 5 s */
		while (count > osKernelGetTickCount())
 80007fe:	e006      	b.n	800080e <LED_Thread1+0x2a>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000800:	2101      	movs	r1, #1
 8000802:	481d      	ldr	r0, [pc, #116]	; (8000878 <LED_Thread1+0x94>)
 8000804:	f000 fcfe 	bl	8001204 <HAL_GPIO_TogglePin>

			osDelay(200);
 8000808:	20c8      	movs	r0, #200	; 0xc8
 800080a:	f002 fae1 	bl	8002dd0 <osDelay>
		while (count > osKernelGetTickCount())
 800080e:	f002 f9a5 	bl	8002b5c <osKernelGetTickCount>
 8000812:	4602      	mov	r2, r0
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	4293      	cmp	r3, r2
 8000818:	d8f2      	bhi.n	8000800 <LED_Thread1+0x1c>
		}

		/* Turn off LED1 */
		HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2101      	movs	r1, #1
 800081e:	4816      	ldr	r0, [pc, #88]	; (8000878 <LED_Thread1+0x94>)
 8000820:	f000 fcd8 	bl	80011d4 <HAL_GPIO_WritePin>

		/* Suspend Thread 1 */
		OsStatus = osThreadSuspend(THREAD1Handle);
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <LED_Thread1+0x98>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4618      	mov	r0, r3
 800082a:	f002 fa69 	bl	8002d00 <osThreadSuspend>
 800082e:	4603      	mov	r3, r0
 8000830:	461a      	mov	r2, r3
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <LED_Thread1+0x9c>)
 8000834:	601a      	str	r2, [r3, #0]

		count = osKernelGetTickCount() + 5000;
 8000836:	f002 f991 	bl	8002b5c <osKernelGetTickCount>
 800083a:	4603      	mov	r3, r0
 800083c:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8000840:	3308      	adds	r3, #8
 8000842:	60fb      	str	r3, [r7, #12]

		/* Toggle LED1 every 500 ms for 5 s */
		while (count > osKernelGetTickCount())
 8000844:	e008      	b.n	8000858 <LED_Thread1+0x74>
		{
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	480b      	ldr	r0, [pc, #44]	; (8000878 <LED_Thread1+0x94>)
 800084c:	f000 fcda 	bl	8001204 <HAL_GPIO_TogglePin>

			osDelay(500);
 8000850:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000854:	f002 fabc 	bl	8002dd0 <osDelay>
		while (count > osKernelGetTickCount())
 8000858:	f002 f980 	bl	8002b5c <osKernelGetTickCount>
 800085c:	4602      	mov	r2, r0
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	4293      	cmp	r3, r2
 8000862:	d8f0      	bhi.n	8000846 <LED_Thread1+0x62>
		}

		/* Resume Thread 2*/
		OsStatus = osThreadResume(THREAD2Handle);
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <LED_Thread1+0xa0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4618      	mov	r0, r3
 800086a:	f002 fa7d 	bl	8002d68 <osThreadResume>
 800086e:	4603      	mov	r3, r0
 8000870:	461a      	mov	r2, r3
 8000872:	4b03      	ldr	r3, [pc, #12]	; (8000880 <LED_Thread1+0x9c>)
 8000874:	601a      	str	r2, [r3, #0]
		count = osKernelGetTickCount() + 5000;
 8000876:	e7bb      	b.n	80007f0 <LED_Thread1+0xc>
 8000878:	40020400 	.word	0x40020400
 800087c:	20004d78 	.word	0x20004d78
 8000880:	2000002c 	.word	0x2000002c
 8000884:	20004d7c 	.word	0x20004d7c

08000888 <LED_Thread2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_LED_Thread2 */
void LED_Thread2(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	uint32_t count;
	(void) argument;
	/* Infinite loop */
	for (;;)
	{
		count = osKernelGetTickCount() + 10000;
 8000890:	f002 f964 	bl	8002b5c <osKernelGetTickCount>
 8000894:	4603      	mov	r3, r0
 8000896:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 800089a:	3310      	adds	r3, #16
 800089c:	60fb      	str	r3, [r7, #12]

		/* Toggle LED2 every 500 ms for 10 s */
		while (count > osKernelGetTickCount())
 800089e:	e007      	b.n	80008b0 <LED_Thread2+0x28>
		{
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	4812      	ldr	r0, [pc, #72]	; (80008ec <LED_Thread2+0x64>)
 80008a4:	f000 fcae 	bl	8001204 <HAL_GPIO_TogglePin>

			osDelay(500);
 80008a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008ac:	f002 fa90 	bl	8002dd0 <osDelay>
		while (count > osKernelGetTickCount())
 80008b0:	f002 f954 	bl	8002b5c <osKernelGetTickCount>
 80008b4:	4602      	mov	r2, r0
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d8f1      	bhi.n	80008a0 <LED_Thread2+0x18>
		}

		/* Turn off LED2 */
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	480a      	ldr	r0, [pc, #40]	; (80008ec <LED_Thread2+0x64>)
 80008c2:	f000 fc87 	bl	80011d4 <HAL_GPIO_WritePin>

		/* Resume Thread 1 */
		OsStatus = osThreadResume(THREAD1Handle);
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <LED_Thread2+0x68>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f002 fa4c 	bl	8002d68 <osThreadResume>
 80008d0:	4603      	mov	r3, r0
 80008d2:	461a      	mov	r2, r3
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <LED_Thread2+0x6c>)
 80008d6:	601a      	str	r2, [r3, #0]

		/* Suspend Thread 2 */
		OsStatus = osThreadSuspend(THREAD2Handle);
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <LED_Thread2+0x70>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4618      	mov	r0, r3
 80008de:	f002 fa0f 	bl	8002d00 <osThreadSuspend>
 80008e2:	4603      	mov	r3, r0
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <LED_Thread2+0x6c>)
 80008e8:	601a      	str	r2, [r3, #0]
		count = osKernelGetTickCount() + 10000;
 80008ea:	e7d1      	b.n	8000890 <LED_Thread2+0x8>
 80008ec:	40020400 	.word	0x40020400
 80008f0:	20004d78 	.word	0x20004d78
 80008f4:	2000002c 	.word	0x2000002c
 80008f8:	20004d7c 	.word	0x20004d7c

080008fc <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM9)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d101      	bne.n	8000912 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		HAL_IncTick();
 800090e:	f000 f9a5 	bl	8000c5c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000912:	bf00      	nop
 8000914:	3708      	adds	r7, #8
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40014000 	.word	0x40014000

08000920 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000926:	e7fe      	b.n	8000926 <Error_Handler+0x6>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_MspInit+0x54>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <HAL_MspInit+0x54>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x54>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_MspInit+0x54>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_MspInit+0x54>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_MspInit+0x54>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	f06f 0001 	mvn.w	r0, #1
 800096e:	f000 fa68 	bl	8000e42 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b08a      	sub	sp, #40	; 0x28
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000988:	f107 0314 	add.w	r3, r7, #20
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]
 8000996:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a19      	ldr	r2, [pc, #100]	; (8000a04 <HAL_UART_MspInit+0x84>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d12c      	bne.n	80009fc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a17      	ldr	r2, [pc, #92]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009c8:	f043 0308 	orr.w	r3, r3, #8
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_UART_MspInit+0x88>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0308 	and.w	r3, r3, #8
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e0:	2302      	movs	r3, #2
 80009e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e8:	2303      	movs	r3, #3
 80009ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009ec:	2307      	movs	r3, #7
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <HAL_UART_MspInit+0x8c>)
 80009f8:	f000 fa4e 	bl	8000e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3728      	adds	r7, #40	; 0x28
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40004800 	.word	0x40004800
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40020c00 	.word	0x40020c00

08000a10 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a30:	d13f      	bne.n	8000ab2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <HAL_PCD_MspInit+0xac>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3a:	4a20      	ldr	r2, [pc, #128]	; (8000abc <HAL_PCD_MspInit+0xac>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6313      	str	r3, [r2, #48]	; 0x30
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <HAL_PCD_MspInit+0xac>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a4e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a60:	230a      	movs	r3, #10
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <HAL_PCD_MspInit+0xb0>)
 8000a6c:	f000 fa14 	bl	8000e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480e      	ldr	r0, [pc, #56]	; (8000ac0 <HAL_PCD_MspInit+0xb0>)
 8000a86:	f000 fa07 	bl	8000e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a8a:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <HAL_PCD_MspInit+0xac>)
 8000a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a8e:	4a0b      	ldr	r2, [pc, #44]	; (8000abc <HAL_PCD_MspInit+0xac>)
 8000a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a94:	6353      	str	r3, [r2, #52]	; 0x34
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_PCD_MspInit+0xac>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_PCD_MspInit+0xac>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <HAL_PCD_MspInit+0xac>)
 8000aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40023800 	.word	0x40023800
 8000ac0:	40020000 	.word	0x40020000

08000ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08c      	sub	sp, #48	; 0x30
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM9 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority ,0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	2018      	movs	r0, #24
 8000ada:	f000 f9b2 	bl	8000e42 <HAL_NVIC_SetPriority>

  /* Enable the TIM9 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000ade:	2018      	movs	r0, #24
 8000ae0:	f000 f9cb 	bl	8000e7a <HAL_NVIC_EnableIRQ>
  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4b1f      	ldr	r3, [pc, #124]	; (8000b68 <HAL_InitTick+0xa4>)
 8000aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aec:	4a1e      	ldr	r2, [pc, #120]	; (8000b68 <HAL_InitTick+0xa4>)
 8000aee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000af2:	6453      	str	r3, [r2, #68]	; 0x44
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <HAL_InitTick+0xa4>)
 8000af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b00:	f107 0210 	add.w	r2, r7, #16
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f001 f912 	bl	8001d34 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b10:	f001 f8ee 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 8000b14:	4603      	mov	r3, r0
 8000b16:	005b      	lsls	r3, r3, #1
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b1c:	4a13      	ldr	r2, [pc, #76]	; (8000b6c <HAL_InitTick+0xa8>)
 8000b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b22:	0c9b      	lsrs	r3, r3, #18
 8000b24:	3b01      	subs	r3, #1
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000b28:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_InitTick+0xac>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	; (8000b74 <HAL_InitTick+0xb0>)
 8000b2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000b2e:	4b10      	ldr	r3, [pc, #64]	; (8000b70 <HAL_InitTick+0xac>)
 8000b30:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b34:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000b36:	4a0e      	ldr	r2, [pc, #56]	; (8000b70 <HAL_InitTick+0xac>)
 8000b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <HAL_InitTick+0xac>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <HAL_InitTick+0xac>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim9) == HAL_OK)
 8000b48:	4809      	ldr	r0, [pc, #36]	; (8000b70 <HAL_InitTick+0xac>)
 8000b4a:	f001 f923 	bl	8001d94 <HAL_TIM_Base_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d104      	bne.n	8000b5e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim9);
 8000b54:	4806      	ldr	r0, [pc, #24]	; (8000b70 <HAL_InitTick+0xac>)
 8000b56:	f001 f975 	bl	8001e44 <HAL_TIM_Base_Start_IT>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	e000      	b.n	8000b60 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3730      	adds	r7, #48	; 0x30
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	431bde83 	.word	0x431bde83
 8000b70:	20004d80 	.word	0x20004d80
 8000b74:	40014000 	.word	0x40014000

08000b78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <NMI_Handler+0x4>

08000b7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b82:	e7fe      	b.n	8000b82 <HardFault_Handler+0x4>

08000b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <MemManage_Handler+0x4>

08000b8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b8e:	e7fe      	b.n	8000b8e <BusFault_Handler+0x4>

08000b90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b94:	e7fe      	b.n	8000b94 <UsageFault_Handler+0x4>

08000b96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b96:	b480      	push	{r7}
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr
	...

08000ba4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8000baa:	f001 f9b9 	bl	8001f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20004d80 	.word	0x20004d80

08000bb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000bc8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000bca:	e003      	b.n	8000bd4 <LoopCopyDataInit>

08000bcc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000bce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bd0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bd2:	3104      	adds	r1, #4

08000bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bd4:	480b      	ldr	r0, [pc, #44]	; (8000c04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bd8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bdc:	d3f6      	bcc.n	8000bcc <CopyDataInit>
  ldr  r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000be0:	e002      	b.n	8000be8 <LoopFillZerobss>

08000be2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000be2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000be4:	f842 3b04 	str.w	r3, [r2], #4

08000be8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bec:	d3f9      	bcc.n	8000be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bee:	f7ff ffe3 	bl	8000bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f004 fd93 	bl	800571c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fc6d 	bl	80004d4 <main>
  bx  lr
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bfc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c00:	0800583c 	.word	0x0800583c
  ldr  r0, =_sdata
 8000c04:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c08:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000c0c:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000c10:	20004e0c 	.word	0x20004e0c

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>
	...

08000c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <HAL_Init+0x40>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a0d      	ldr	r2, [pc, #52]	; (8000c58 <HAL_Init+0x40>)
 8000c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <HAL_Init+0x40>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <HAL_Init+0x40>)
 8000c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_Init+0x40>)
 8000c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f000 f8f3 	bl	8000e2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f7ff ff3c 	bl	8000ac4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fe6c 	bl	8000928 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023c00 	.word	0x40023c00

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	461a      	mov	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	4a03      	ldr	r2, [pc, #12]	; (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	6013      	str	r3, [r2, #0]
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	20004dc8 	.word	0x20004dc8

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	20004dc8 	.word	0x20004dc8

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff fff0 	bl	8000c80 <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <HAL_Delay+0x40>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffe0 	bl	8000c80 <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	db0b      	blt.n	8000d66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4e:	79fb      	ldrb	r3, [r7, #7]
 8000d50:	f003 021f 	and.w	r2, r3, #31
 8000d54:	4906      	ldr	r1, [pc, #24]	; (8000d70 <__NVIC_EnableIRQ+0x34>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	095b      	lsrs	r3, r3, #5
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr

08000e2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f7ff ff4f 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e54:	f7ff ff64 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	6978      	ldr	r0, [r7, #20]
 8000e60:	f7ff ffb2 	bl	8000dc8 <NVIC_EncodePriority>
 8000e64:	4602      	mov	r2, r0
 8000e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ff81 	bl	8000d74 <__NVIC_SetPriority>
}
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff ff57 	bl	8000d3c <__NVIC_EnableIRQ>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ea6:	e16f      	b.n	8001188 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	2101      	movs	r1, #1
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f000 8161 	beq.w	8001182 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d00b      	beq.n	8000ee0 <HAL_GPIO_Init+0x48>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed4:	2b11      	cmp	r3, #17
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	2b12      	cmp	r3, #18
 8000ede:	d130      	bne.n	8000f42 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2203      	movs	r2, #3
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68da      	ldr	r2, [r3, #12]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f16:	2201      	movs	r2, #1
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	091b      	lsrs	r3, r3, #4
 8000f2c:	f003 0201 	and.w	r2, r3, #1
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	689a      	ldr	r2, [r3, #8]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0xea>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b12      	cmp	r3, #18
 8000f80:	d123      	bne.n	8000fca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	08da      	lsrs	r2, r3, #3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3208      	adds	r2, #8
 8000fc4:	6939      	ldr	r1, [r7, #16]
 8000fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0203 	and.w	r2, r3, #3
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	f000 80bb 	beq.w	8001182 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100c:	2300      	movs	r3, #0
 800100e:	60bb      	str	r3, [r7, #8]
 8001010:	4b64      	ldr	r3, [pc, #400]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001014:	4a63      	ldr	r2, [pc, #396]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 8001016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101a:	6453      	str	r3, [r2, #68]	; 0x44
 800101c:	4b61      	ldr	r3, [pc, #388]	; (80011a4 <HAL_GPIO_Init+0x30c>)
 800101e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001028:	4a5f      	ldr	r2, [pc, #380]	; (80011a8 <HAL_GPIO_Init+0x310>)
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	220f      	movs	r2, #15
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	43db      	mvns	r3, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a57      	ldr	r2, [pc, #348]	; (80011ac <HAL_GPIO_Init+0x314>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d031      	beq.n	80010b8 <HAL_GPIO_Init+0x220>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a56      	ldr	r2, [pc, #344]	; (80011b0 <HAL_GPIO_Init+0x318>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d02b      	beq.n	80010b4 <HAL_GPIO_Init+0x21c>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a55      	ldr	r2, [pc, #340]	; (80011b4 <HAL_GPIO_Init+0x31c>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d025      	beq.n	80010b0 <HAL_GPIO_Init+0x218>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a54      	ldr	r2, [pc, #336]	; (80011b8 <HAL_GPIO_Init+0x320>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d01f      	beq.n	80010ac <HAL_GPIO_Init+0x214>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a53      	ldr	r2, [pc, #332]	; (80011bc <HAL_GPIO_Init+0x324>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d019      	beq.n	80010a8 <HAL_GPIO_Init+0x210>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_GPIO_Init+0x328>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d013      	beq.n	80010a4 <HAL_GPIO_Init+0x20c>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a51      	ldr	r2, [pc, #324]	; (80011c4 <HAL_GPIO_Init+0x32c>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d00d      	beq.n	80010a0 <HAL_GPIO_Init+0x208>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	4a50      	ldr	r2, [pc, #320]	; (80011c8 <HAL_GPIO_Init+0x330>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d007      	beq.n	800109c <HAL_GPIO_Init+0x204>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a4f      	ldr	r2, [pc, #316]	; (80011cc <HAL_GPIO_Init+0x334>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d101      	bne.n	8001098 <HAL_GPIO_Init+0x200>
 8001094:	2308      	movs	r3, #8
 8001096:	e010      	b.n	80010ba <HAL_GPIO_Init+0x222>
 8001098:	2309      	movs	r3, #9
 800109a:	e00e      	b.n	80010ba <HAL_GPIO_Init+0x222>
 800109c:	2307      	movs	r3, #7
 800109e:	e00c      	b.n	80010ba <HAL_GPIO_Init+0x222>
 80010a0:	2306      	movs	r3, #6
 80010a2:	e00a      	b.n	80010ba <HAL_GPIO_Init+0x222>
 80010a4:	2305      	movs	r3, #5
 80010a6:	e008      	b.n	80010ba <HAL_GPIO_Init+0x222>
 80010a8:	2304      	movs	r3, #4
 80010aa:	e006      	b.n	80010ba <HAL_GPIO_Init+0x222>
 80010ac:	2303      	movs	r3, #3
 80010ae:	e004      	b.n	80010ba <HAL_GPIO_Init+0x222>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x222>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <HAL_GPIO_Init+0x222>
 80010b8:	2300      	movs	r3, #0
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	f002 0203 	and.w	r2, r2, #3
 80010c0:	0092      	lsls	r2, r2, #2
 80010c2:	4093      	lsls	r3, r2
 80010c4:	461a      	mov	r2, r3
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010cc:	4936      	ldr	r1, [pc, #216]	; (80011a8 <HAL_GPIO_Init+0x310>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <HAL_GPIO_Init+0x338>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010fe:	4a34      	ldr	r2, [pc, #208]	; (80011d0 <HAL_GPIO_Init+0x338>)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001104:	4b32      	ldr	r3, [pc, #200]	; (80011d0 <HAL_GPIO_Init+0x338>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001128:	4a29      	ldr	r2, [pc, #164]	; (80011d0 <HAL_GPIO_Init+0x338>)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b28      	ldr	r3, [pc, #160]	; (80011d0 <HAL_GPIO_Init+0x338>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001152:	4a1f      	ldr	r2, [pc, #124]	; (80011d0 <HAL_GPIO_Init+0x338>)
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001158:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_GPIO_Init+0x338>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43db      	mvns	r3, r3
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001170:	2b00      	cmp	r3, #0
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_GPIO_Init+0x338>)
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa22 f303 	lsr.w	r3, r2, r3
 8001192:	2b00      	cmp	r3, #0
 8001194:	f47f ae88 	bne.w	8000ea8 <HAL_GPIO_Init+0x10>
  }
}
 8001198:	bf00      	nop
 800119a:	371c      	adds	r7, #28
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	40020400 	.word	0x40020400
 80011b4:	40020800 	.word	0x40020800
 80011b8:	40020c00 	.word	0x40020c00
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40021400 	.word	0x40021400
 80011c4:	40021800 	.word	0x40021800
 80011c8:	40021c00 	.word	0x40021c00
 80011cc:	40022000 	.word	0x40022000
 80011d0:	40013c00 	.word	0x40013c00

080011d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	807b      	strh	r3, [r7, #2]
 80011e0:	4613      	mov	r3, r2
 80011e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e4:	787b      	ldrb	r3, [r7, #1]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	887a      	ldrh	r2, [r7, #2]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f0:	e003      	b.n	80011fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f2:	887b      	ldrh	r3, [r7, #2]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	619a      	str	r2, [r3, #24]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	4013      	ands	r3, r2
 800121c:	041a      	lsls	r2, r3, #16
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43d9      	mvns	r1, r3
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	400b      	ands	r3, r1
 8001226:	431a      	orrs	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	619a      	str	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001236:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001238:	b08f      	sub	sp, #60	; 0x3c
 800123a:	af0a      	add	r7, sp, #40	; 0x28
 800123c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e10f      	b.n	8001468 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b00      	cmp	r3, #0
 8001258:	d106      	bne.n	8001268 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fbd4 	bl	8000a10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2203      	movs	r2, #3
 800126c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f001 f9b5 	bl	80025f6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	687e      	ldr	r6, [r7, #4]
 8001294:	466d      	mov	r5, sp
 8001296:	f106 0410 	add.w	r4, r6, #16
 800129a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800129c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80012aa:	1d33      	adds	r3, r6, #4
 80012ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f001 f94a 	bl	8002548 <USB_CoreInit>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d005      	beq.n	80012c6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2202      	movs	r2, #2
 80012be:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e0d0      	b.n	8001468 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2100      	movs	r1, #0
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 f9a2 	bl	8002616 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	e04a      	b.n	800136e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012d8:	7bfa      	ldrb	r2, [r7, #15]
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	4613      	mov	r3, r2
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	440b      	add	r3, r1
 80012e6:	333d      	adds	r3, #61	; 0x3d
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012ec:	7bfa      	ldrb	r2, [r7, #15]
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	4613      	mov	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	333c      	adds	r3, #60	; 0x3c
 80012fc:	7bfa      	ldrb	r2, [r7, #15]
 80012fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	b298      	uxth	r0, r3
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	1a9b      	subs	r3, r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	440b      	add	r3, r1
 8001312:	3342      	adds	r3, #66	; 0x42
 8001314:	4602      	mov	r2, r0
 8001316:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001318:	7bfa      	ldrb	r2, [r7, #15]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	1a9b      	subs	r3, r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	440b      	add	r3, r1
 8001326:	333f      	adds	r3, #63	; 0x3f
 8001328:	2200      	movs	r2, #0
 800132a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800132c:	7bfa      	ldrb	r2, [r7, #15]
 800132e:	6879      	ldr	r1, [r7, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	440b      	add	r3, r1
 800133a:	3344      	adds	r3, #68	; 0x44
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001340:	7bfa      	ldrb	r2, [r7, #15]
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	1a9b      	subs	r3, r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	3348      	adds	r3, #72	; 0x48
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	4613      	mov	r3, r2
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	1a9b      	subs	r3, r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	440b      	add	r3, r1
 8001362:	3350      	adds	r3, #80	; 0x50
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	d3af      	bcc.n	80012d8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001378:	2300      	movs	r3, #0
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	e044      	b.n	8001408 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800137e:	7bfa      	ldrb	r2, [r7, #15]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	4613      	mov	r3, r2
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	440b      	add	r3, r1
 800138c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80013a6:	7bfa      	ldrb	r2, [r7, #15]
 80013a8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013aa:	7bfa      	ldrb	r2, [r7, #15]
 80013ac:	6879      	ldr	r1, [r7, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	440b      	add	r3, r1
 80013b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013c0:	7bfa      	ldrb	r2, [r7, #15]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	1a9b      	subs	r3, r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	440b      	add	r3, r1
 80013ce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013ec:	7bfa      	ldrb	r2, [r7, #15]
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	4613      	mov	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	1a9b      	subs	r3, r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	3301      	adds	r3, #1
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	7bfa      	ldrb	r2, [r7, #15]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	429a      	cmp	r2, r3
 8001410:	d3b5      	bcc.n	800137e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	687e      	ldr	r6, [r7, #4]
 800141a:	466d      	mov	r5, sp
 800141c:	f106 0410 	add.w	r4, r6, #16
 8001420:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001422:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001424:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001426:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001428:	e894 0003 	ldmia.w	r4, {r0, r1}
 800142c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001430:	1d33      	adds	r3, r6, #4
 8001432:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001434:	6838      	ldr	r0, [r7, #0]
 8001436:	f001 f919 	bl	800266c <USB_DevInit>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d005      	beq.n	800144c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2202      	movs	r2, #2
 8001444:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	e00d      	b.n	8001468 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  (void)USB_DevDisconnect(hpcd->Instance);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f001 fac3 	bl	80029ec <USB_DevDisconnect>

  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001470 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e237      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d050      	beq.n	8001530 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800148e:	4ba3      	ldr	r3, [pc, #652]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b04      	cmp	r3, #4
 8001498:	d00c      	beq.n	80014b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800149a:	4ba0      	ldr	r3, [pc, #640]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80014a2:	2b08      	cmp	r3, #8
 80014a4:	d112      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80014a6:	4b9d      	ldr	r3, [pc, #628]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014b2:	d10b      	bne.n	80014cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b4:	4b99      	ldr	r3, [pc, #612]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d036      	beq.n	800152e <HAL_RCC_OscConfig+0xbe>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d132      	bne.n	800152e <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e212      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685a      	ldr	r2, [r3, #4]
 80014d0:	4b93      	ldr	r3, [pc, #588]	; (8001720 <HAL_RCC_OscConfig+0x2b0>)
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d013      	beq.n	8001506 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fbcf 	bl	8000c80 <HAL_GetTick>
 80014e2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014e6:	f7ff fbcb 	bl	8000c80 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b64      	cmp	r3, #100	; 0x64
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1fc      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f8:	4b88      	ldr	r3, [pc, #544]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x76>
 8001504:	e014      	b.n	8001530 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fbbb 	bl	8000c80 <HAL_GetTick>
 800150a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800150e:	f7ff fbb7 	bl	8000c80 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	6a3b      	ldr	r3, [r7, #32]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b64      	cmp	r3, #100	; 0x64
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e1e8      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001520:	4b7e      	ldr	r3, [pc, #504]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1f0      	bne.n	800150e <HAL_RCC_OscConfig+0x9e>
 800152c:	e000      	b.n	8001530 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800152e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d077      	beq.n	800162c <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800153c:	4b77      	ldr	r3, [pc, #476]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	f003 030c 	and.w	r3, r3, #12
 8001544:	2b00      	cmp	r3, #0
 8001546:	d00b      	beq.n	8001560 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001548:	4b74      	ldr	r3, [pc, #464]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001550:	2b08      	cmp	r3, #8
 8001552:	d126      	bne.n	80015a2 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001554:	4b71      	ldr	r3, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d120      	bne.n	80015a2 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001560:	4b6e      	ldr	r3, [pc, #440]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	2b01      	cmp	r3, #1
 8001572:	d001      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e1bc      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001578:	4b68      	ldr	r3, [pc, #416]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	691b      	ldr	r3, [r3, #16]
 8001584:	21f8      	movs	r1, #248	; 0xf8
 8001586:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	69b9      	ldr	r1, [r7, #24]
 800158a:	fa91 f1a1 	rbit	r1, r1
 800158e:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001590:	6979      	ldr	r1, [r7, #20]
 8001592:	fab1 f181 	clz	r1, r1
 8001596:	b2c9      	uxtb	r1, r1
 8001598:	408b      	lsls	r3, r1
 800159a:	4960      	ldr	r1, [pc, #384]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 800159c:	4313      	orrs	r3, r2
 800159e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a0:	e044      	b.n	800162c <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d02a      	beq.n	8001600 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015aa:	4b5e      	ldr	r3, [pc, #376]	; (8001724 <HAL_RCC_OscConfig+0x2b4>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fb66 	bl	8000c80 <HAL_GetTick>
 80015b4:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fb62 	bl	8000c80 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e193      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ca:	4b54      	ldr	r3, [pc, #336]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d0f0      	beq.n	80015b8 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d6:	4b51      	ldr	r3, [pc, #324]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	21f8      	movs	r1, #248	; 0xf8
 80015e4:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e6:	6939      	ldr	r1, [r7, #16]
 80015e8:	fa91 f1a1 	rbit	r1, r1
 80015ec:	60f9      	str	r1, [r7, #12]
  return result;
 80015ee:	68f9      	ldr	r1, [r7, #12]
 80015f0:	fab1 f181 	clz	r1, r1
 80015f4:	b2c9      	uxtb	r1, r1
 80015f6:	408b      	lsls	r3, r1
 80015f8:	4948      	ldr	r1, [pc, #288]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
 80015fe:	e015      	b.n	800162c <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001600:	4b48      	ldr	r3, [pc, #288]	; (8001724 <HAL_RCC_OscConfig+0x2b4>)
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001606:	f7ff fb3b 	bl	8000c80 <HAL_GetTick>
 800160a:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160e:	f7ff fb37 	bl	8000c80 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e168      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001620:	4b3e      	ldr	r3, [pc, #248]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1f0      	bne.n	800160e <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d030      	beq.n	800169a <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d016      	beq.n	800166e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001640:	4b39      	ldr	r3, [pc, #228]	; (8001728 <HAL_RCC_OscConfig+0x2b8>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fb1b 	bl	8000c80 <HAL_GetTick>
 800164a:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800164e:	f7ff fb17 	bl	8000c80 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e148      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001660:	4b2e      	ldr	r3, [pc, #184]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x1de>
 800166c:	e015      	b.n	800169a <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166e:	4b2e      	ldr	r3, [pc, #184]	; (8001728 <HAL_RCC_OscConfig+0x2b8>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff fb04 	bl	8000c80 <HAL_GetTick>
 8001678:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fb00 	bl	8000c80 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	6a3b      	ldr	r3, [r7, #32]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e131      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 8001690:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	f000 8088 	beq.w	80017b8 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d110      	bne.n	80016dc <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a16      	ldr	r2, [pc, #88]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <HAL_RCC_OscConfig+0x2ac>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016d6:	2301      	movs	r3, #1
 80016d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80016dc:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_RCC_OscConfig+0x2bc>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a12      	ldr	r2, [pc, #72]	; (800172c <HAL_RCC_OscConfig+0x2bc>)
 80016e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e6:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	4b10      	ldr	r3, [pc, #64]	; (800172c <HAL_RCC_OscConfig+0x2bc>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d123      	bne.n	800173c <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <HAL_RCC_OscConfig+0x2bc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0c      	ldr	r2, [pc, #48]	; (800172c <HAL_RCC_OscConfig+0x2bc>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001700:	f7ff fabe 	bl	8000c80 <HAL_GetTick>
 8001704:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001706:	e013      	b.n	8001730 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001708:	f7ff faba 	bl	8000c80 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	6a3b      	ldr	r3, [r7, #32]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d90c      	bls.n	8001730 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0eb      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40023802 	.word	0x40023802
 8001724:	42470000 	.word	0x42470000
 8001728:	42470e80 	.word	0x42470e80
 800172c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001730:	4b72      	ldr	r3, [pc, #456]	; (80018fc <HAL_RCC_OscConfig+0x48c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0e5      	beq.n	8001708 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x490>)
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d015      	beq.n	800177a <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174e:	f7ff fa97 	bl	8000c80 <HAL_GetTick>
 8001752:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	e00a      	b.n	800176c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001756:	f7ff fa93 	bl	8000c80 <HAL_GetTick>
 800175a:	4602      	mov	r2, r0
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	f241 3288 	movw	r2, #5000	; 0x1388
 8001764:	4293      	cmp	r3, r2
 8001766:	d901      	bls.n	800176c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001768:	2303      	movs	r3, #3
 800176a:	e0c2      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176c:	4b65      	ldr	r3, [pc, #404]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0ee      	beq.n	8001756 <HAL_RCC_OscConfig+0x2e6>
 8001778:	e014      	b.n	80017a4 <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800177a:	f7ff fa81 	bl	8000c80 <HAL_GetTick>
 800177e:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	e00a      	b.n	8001798 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001782:	f7ff fa7d 	bl	8000c80 <HAL_GetTick>
 8001786:	4602      	mov	r2, r0
 8001788:	6a3b      	ldr	r3, [r7, #32]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001790:	4293      	cmp	r3, r2
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e0ac      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001798:	4b5a      	ldr	r3, [pc, #360]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 800179a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1ee      	bne.n	8001782 <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d105      	bne.n	80017b8 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ac:	4b55      	ldr	r3, [pc, #340]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	4a54      	ldr	r2, [pc, #336]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 80017b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8097 	beq.w	80018f0 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c2:	4b50      	ldr	r3, [pc, #320]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d061      	beq.n	8001892 <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d146      	bne.n	8001864 <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d6:	4b4c      	ldr	r3, [pc, #304]	; (8001908 <HAL_RCC_OscConfig+0x498>)
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017dc:	f7ff fa50 	bl	8000c80 <HAL_GetTick>
 80017e0:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e2:	e008      	b.n	80017f6 <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017e4:	f7ff fa4c 	bl	8000c80 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	6a3b      	ldr	r3, [r7, #32]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	2b64      	cmp	r3, #100	; 0x64
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e07d      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f6:	4b43      	ldr	r3, [pc, #268]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d1f0      	bne.n	80017e4 <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001802:	4b40      	ldr	r3, [pc, #256]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	4b41      	ldr	r3, [pc, #260]	; (800190c <HAL_RCC_OscConfig+0x49c>)
 8001808:	4013      	ands	r3, r2
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	69d1      	ldr	r1, [r2, #28]
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	6a12      	ldr	r2, [r2, #32]
 8001812:	4311      	orrs	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001818:	0192      	lsls	r2, r2, #6
 800181a:	4311      	orrs	r1, r2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001820:	0612      	lsls	r2, r2, #24
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001828:	0852      	lsrs	r2, r2, #1
 800182a:	3a01      	subs	r2, #1
 800182c:	0412      	lsls	r2, r2, #16
 800182e:	430a      	orrs	r2, r1
 8001830:	4934      	ldr	r1, [pc, #208]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001836:	4b34      	ldr	r3, [pc, #208]	; (8001908 <HAL_RCC_OscConfig+0x498>)
 8001838:	2201      	movs	r2, #1
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183c:	f7ff fa20 	bl	8000c80 <HAL_GetTick>
 8001840:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001844:	f7ff fa1c 	bl	8000c80 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	; 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e04d      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001856:	4b2b      	ldr	r3, [pc, #172]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0f0      	beq.n	8001844 <HAL_RCC_OscConfig+0x3d4>
 8001862:	e045      	b.n	80018f0 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001864:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_RCC_OscConfig+0x498>)
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff fa09 	bl	8000c80 <HAL_GetTick>
 800186e:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001872:	f7ff fa05 	bl	8000c80 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	; 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e036      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001884:	4b1f      	ldr	r3, [pc, #124]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x402>
 8001890:	e02e      	b.n	80018f0 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	699b      	ldr	r3, [r3, #24]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e029      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 800189e:	4b19      	ldr	r3, [pc, #100]	; (8001904 <HAL_RCC_OscConfig+0x494>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d11c      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d115      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	099b      	lsrs	r3, r3, #6
 80018c4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d10d      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80018da:	429a      	cmp	r2, r3
 80018dc:	d106      	bne.n	80018ec <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d001      	beq.n	80018f0 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 80018ec:	2301      	movs	r3, #1
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3728      	adds	r7, #40	; 0x28
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40007000 	.word	0x40007000
 8001900:	40023870 	.word	0x40023870
 8001904:	40023800 	.word	0x40023800
 8001908:	42470060 	.word	0x42470060
 800190c:	f0bc8000 	.word	0xf0bc8000

08001910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0d2      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001924:	4b6b      	ldr	r3, [pc, #428]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	683a      	ldr	r2, [r7, #0]
 800192e:	429a      	cmp	r2, r3
 8001930:	d90c      	bls.n	800194c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001932:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800193a:	4b66      	ldr	r3, [pc, #408]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e0be      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d020      	beq.n	800199a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001964:	4b5c      	ldr	r3, [pc, #368]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	4a5b      	ldr	r2, [pc, #364]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800196a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800196e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0308 	and.w	r3, r3, #8
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 800197c:	4b56      	ldr	r3, [pc, #344]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a55      	ldr	r2, [pc, #340]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001986:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4950      	ldr	r1, [pc, #320]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001996:	4313      	orrs	r3, r2
 8001998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d040      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d107      	bne.n	80019be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ae:	4b4a      	ldr	r3, [pc, #296]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d115      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e085      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	d107      	bne.n	80019d6 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c6:	4b44      	ldr	r3, [pc, #272]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d109      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e079      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d6:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e071      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019e6:	4b3c      	ldr	r3, [pc, #240]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 0203 	bic.w	r2, r3, #3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	4939      	ldr	r1, [pc, #228]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f8:	f7ff f942 	bl	8000c80 <HAL_GetTick>
 80019fc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019fe:	e00a      	b.n	8001a16 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a00:	f7ff f93e 	bl	8000c80 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e059      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a16:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 020c 	and.w	r2, r3, #12
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d1eb      	bne.n	8001a00 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a28:	4b2a      	ldr	r3, [pc, #168]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 030f 	and.w	r3, r3, #15
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d20c      	bcs.n	8001a50 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e03c      	b.n	8001aca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d008      	beq.n	8001a6e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	491b      	ldr	r1, [pc, #108]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0308 	and.w	r3, r3, #8
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d009      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a7a:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4913      	ldr	r1, [pc, #76]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001a8e:	f000 f82b 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001a92:	4601      	mov	r1, r0
 8001a94:	4b10      	ldr	r3, [pc, #64]	; (8001ad8 <HAL_RCC_ClockConfig+0x1c8>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a9c:	22f0      	movs	r2, #240	; 0xf0
 8001a9e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	fa92 f2a2 	rbit	r2, r2
 8001aa6:	60fa      	str	r2, [r7, #12]
  return result;
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	fab2 f282 	clz	r2, r2
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	40d3      	lsrs	r3, r2
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_RCC_ClockConfig+0x1cc>)
 8001ab4:	5cd3      	ldrb	r3, [r2, r3]
 8001ab6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aba:	4a09      	ldr	r2, [pc, #36]	; (8001ae0 <HAL_RCC_ClockConfig+0x1d0>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_RCC_ClockConfig+0x1d4>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe fffe 	bl	8000ac4 <HAL_InitTick>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023c00 	.word	0x40023c00
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08005814 	.word	0x08005814
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	607b      	str	r3, [r7, #4]
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	2300      	movs	r3, #0
 8001af8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001afe:	4b63      	ldr	r3, [pc, #396]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	d007      	beq.n	8001b1a <HAL_RCC_GetSysClockFreq+0x32>
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d008      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x38>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 80b4 	bne.w	8001c7c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b14:	4b5e      	ldr	r3, [pc, #376]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001b16:	60bb      	str	r3, [r7, #8]
       break;
 8001b18:	e0b3      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1a:	4b5e      	ldr	r3, [pc, #376]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001b1c:	60bb      	str	r3, [r7, #8]
      break;
 8001b1e:	e0b0      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b20:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b28:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2a:	4b58      	ldr	r3, [pc, #352]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d04a      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b36:	4b55      	ldr	r3, [pc, #340]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	099b      	lsrs	r3, r3, #6
 8001b3c:	f04f 0400 	mov.w	r4, #0
 8001b40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b44:	f04f 0200 	mov.w	r2, #0
 8001b48:	ea03 0501 	and.w	r5, r3, r1
 8001b4c:	ea04 0602 	and.w	r6, r4, r2
 8001b50:	4629      	mov	r1, r5
 8001b52:	4632      	mov	r2, r6
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	f04f 0400 	mov.w	r4, #0
 8001b5c:	0154      	lsls	r4, r2, #5
 8001b5e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b62:	014b      	lsls	r3, r1, #5
 8001b64:	4619      	mov	r1, r3
 8001b66:	4622      	mov	r2, r4
 8001b68:	1b49      	subs	r1, r1, r5
 8001b6a:	eb62 0206 	sbc.w	r2, r2, r6
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	f04f 0400 	mov.w	r4, #0
 8001b76:	0194      	lsls	r4, r2, #6
 8001b78:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b7c:	018b      	lsls	r3, r1, #6
 8001b7e:	1a5b      	subs	r3, r3, r1
 8001b80:	eb64 0402 	sbc.w	r4, r4, r2
 8001b84:	f04f 0100 	mov.w	r1, #0
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	00e2      	lsls	r2, r4, #3
 8001b8e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b92:	00d9      	lsls	r1, r3, #3
 8001b94:	460b      	mov	r3, r1
 8001b96:	4614      	mov	r4, r2
 8001b98:	195b      	adds	r3, r3, r5
 8001b9a:	eb44 0406 	adc.w	r4, r4, r6
 8001b9e:	f04f 0100 	mov.w	r1, #0
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	0262      	lsls	r2, r4, #9
 8001ba8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001bac:	0259      	lsls	r1, r3, #9
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	4621      	mov	r1, r4
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f04f 0400 	mov.w	r4, #0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4623      	mov	r3, r4
 8001bc0:	f7fe fb06 	bl	80001d0 <__aeabi_uldivmod>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	e049      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bcc:	4b2f      	ldr	r3, [pc, #188]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	099b      	lsrs	r3, r3, #6
 8001bd2:	f04f 0400 	mov.w	r4, #0
 8001bd6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bda:	f04f 0200 	mov.w	r2, #0
 8001bde:	ea03 0501 	and.w	r5, r3, r1
 8001be2:	ea04 0602 	and.w	r6, r4, r2
 8001be6:	4629      	mov	r1, r5
 8001be8:	4632      	mov	r2, r6
 8001bea:	f04f 0300 	mov.w	r3, #0
 8001bee:	f04f 0400 	mov.w	r4, #0
 8001bf2:	0154      	lsls	r4, r2, #5
 8001bf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf8:	014b      	lsls	r3, r1, #5
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4622      	mov	r2, r4
 8001bfe:	1b49      	subs	r1, r1, r5
 8001c00:	eb62 0206 	sbc.w	r2, r2, r6
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	f04f 0400 	mov.w	r4, #0
 8001c0c:	0194      	lsls	r4, r2, #6
 8001c0e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c12:	018b      	lsls	r3, r1, #6
 8001c14:	1a5b      	subs	r3, r3, r1
 8001c16:	eb64 0402 	sbc.w	r4, r4, r2
 8001c1a:	f04f 0100 	mov.w	r1, #0
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	00e2      	lsls	r2, r4, #3
 8001c24:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c28:	00d9      	lsls	r1, r3, #3
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	195b      	adds	r3, r3, r5
 8001c30:	eb44 0406 	adc.w	r4, r4, r6
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	f04f 0200 	mov.w	r2, #0
 8001c3c:	02a2      	lsls	r2, r4, #10
 8001c3e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c42:	0299      	lsls	r1, r3, #10
 8001c44:	460b      	mov	r3, r1
 8001c46:	4614      	mov	r4, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	4621      	mov	r1, r4
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f04f 0400 	mov.w	r4, #0
 8001c52:	461a      	mov	r2, r3
 8001c54:	4623      	mov	r3, r4
 8001c56:	f7fe fabb 	bl	80001d0 <__aeabi_uldivmod>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	460c      	mov	r4, r1
 8001c5e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0c1b      	lsrs	r3, r3, #16
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c70:	68fa      	ldr	r2, [r7, #12]
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	60bb      	str	r3, [r7, #8]
      break;
 8001c7a:	e002      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c7e:	60bb      	str	r3, [r7, #8]
      break;
 8001c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c82:	68bb      	ldr	r3, [r7, #8]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3714      	adds	r7, #20
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	007a1200 	.word	0x007a1200

08001c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b02      	ldr	r3, [pc, #8]	; (8001ca8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	20000000 	.word	0x20000000

08001cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001cb2:	f7ff fff1 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb6:	4601      	mov	r1, r0
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001cc0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001cc4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	fa92 f2a2 	rbit	r2, r2
 8001ccc:	603a      	str	r2, [r7, #0]
  return result;
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	fab2 f282 	clz	r2, r2
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	40d3      	lsrs	r3, r2
 8001cd8:	4a04      	ldr	r2, [pc, #16]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x40>)
 8001cda:	5cd3      	ldrb	r3, [r2, r3]
 8001cdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	08005824 	.word	0x08005824

08001cf0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001cf6:	f7ff ffcf 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cfa:	4601      	mov	r1, r0
 8001cfc:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001d04:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001d08:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	fa92 f2a2 	rbit	r2, r2
 8001d10:	603a      	str	r2, [r7, #0]
  return result;
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	fab2 f282 	clz	r2, r2
 8001d18:	b2d2      	uxtb	r2, r2
 8001d1a:	40d3      	lsrs	r3, r2
 8001d1c:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001d1e:	5cd3      	ldrb	r3, [r2, r3]
 8001d20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	08005824 	.word	0x08005824

08001d34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	220f      	movs	r2, #15
 8001d42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <HAL_RCC_GetClockConfig+0x58>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0203 	and.w	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <HAL_RCC_GetClockConfig+0x58>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <HAL_RCC_GetClockConfig+0x58>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d68:	4b08      	ldr	r3, [pc, #32]	; (8001d8c <HAL_RCC_GetClockConfig+0x58>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	08db      	lsrs	r3, r3, #3
 8001d6e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d76:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <HAL_RCC_GetClockConfig+0x5c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 020f 	and.w	r2, r3, #15
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	601a      	str	r2, [r3, #0]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e041      	b.n	8001e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f839 	bl	8001e32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 f9d0 	bl	8002178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr

08001e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d001      	beq.n	8001e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e04e      	b.n	8001efa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2202      	movs	r2, #2
 8001e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68da      	ldr	r2, [r3, #12]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a22      	ldr	r2, [pc, #136]	; (8001f04 <HAL_TIM_Base_Start_IT+0xc0>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e86:	d01d      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1e      	ldr	r2, [pc, #120]	; (8001f08 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d018      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1d      	ldr	r2, [pc, #116]	; (8001f0c <HAL_TIM_Base_Start_IT+0xc8>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d013      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1b      	ldr	r2, [pc, #108]	; (8001f10 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00e      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1a      	ldr	r2, [pc, #104]	; (8001f14 <HAL_TIM_Base_Start_IT+0xd0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d009      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <HAL_TIM_Base_Start_IT+0xd4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d004      	beq.n	8001ec4 <HAL_TIM_Base_Start_IT+0x80>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a17      	ldr	r2, [pc, #92]	; (8001f1c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d111      	bne.n	8001ee8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b06      	cmp	r3, #6
 8001ed4:	d010      	beq.n	8001ef8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f042 0201 	orr.w	r2, r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee6:	e007      	b.n	8001ef8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40010400 	.word	0x40010400
 8001f18:	40014000 	.word	0x40014000
 8001f1c:	40001800 	.word	0x40001800

08001f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d122      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d11b      	bne.n	8001f7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8ed 	bl	8002142 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8e0 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8ef 	bl	8002154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	f003 0304 	and.w	r3, r3, #4
 8001f86:	2b04      	cmp	r3, #4
 8001f88:	d122      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d11b      	bne.n	8001fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0204 	mvn.w	r2, #4
 8001fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d003      	beq.n	8001fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8c3 	bl	8002142 <HAL_TIM_IC_CaptureCallback>
 8001fbc:	e005      	b.n	8001fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8b6 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f8c5 	bl	8002154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b08      	cmp	r3, #8
 8001fdc:	d122      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d11b      	bne.n	8002024 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0208 	mvn.w	r2, #8
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 0303 	and.w	r3, r3, #3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f899 	bl	8002142 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f88c 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f89b 	bl	8002154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b10      	cmp	r3, #16
 8002030:	d122      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f003 0310 	and.w	r3, r3, #16
 800203c:	2b10      	cmp	r3, #16
 800203e:	d11b      	bne.n	8002078 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f06f 0210 	mvn.w	r2, #16
 8002048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2208      	movs	r2, #8
 800204e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f86f 	bl	8002142 <HAL_TIM_IC_CaptureCallback>
 8002064:	e005      	b.n	8002072 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f000 f862 	bl	8002130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f871 	bl	8002154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b01      	cmp	r3, #1
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	2b01      	cmp	r3, #1
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0201 	mvn.w	r2, #1
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7fe fc2c 	bl	80008fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ae:	2b80      	cmp	r3, #128	; 0x80
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020bc:	2b80      	cmp	r3, #128	; 0x80
 80020be:	d107      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8fb 	bl	80022c6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020da:	2b40      	cmp	r3, #64	; 0x40
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e8:	2b40      	cmp	r3, #64	; 0x40
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f835 	bl	8002166 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0320 	and.w	r3, r3, #32
 8002106:	2b20      	cmp	r3, #32
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0320 	and.w	r3, r3, #32
 8002114:	2b20      	cmp	r3, #32
 8002116:	d107      	bne.n	8002128 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0220 	mvn.w	r2, #32
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f8c6 	bl	80022b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr

08002142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr

08002166 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	bc80      	pop	{r7}
 8002176:	4770      	bx	lr

08002178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a3f      	ldr	r2, [pc, #252]	; (8002288 <TIM_Base_SetConfig+0x110>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002196:	d00f      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3c      	ldr	r2, [pc, #240]	; (800228c <TIM_Base_SetConfig+0x114>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00b      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3b      	ldr	r2, [pc, #236]	; (8002290 <TIM_Base_SetConfig+0x118>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3a      	ldr	r2, [pc, #232]	; (8002294 <TIM_Base_SetConfig+0x11c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a39      	ldr	r2, [pc, #228]	; (8002298 <TIM_Base_SetConfig+0x120>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d108      	bne.n	80021ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2e      	ldr	r2, [pc, #184]	; (8002288 <TIM_Base_SetConfig+0x110>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d8:	d027      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2b      	ldr	r2, [pc, #172]	; (800228c <TIM_Base_SetConfig+0x114>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d023      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2a      	ldr	r2, [pc, #168]	; (8002290 <TIM_Base_SetConfig+0x118>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a29      	ldr	r2, [pc, #164]	; (8002294 <TIM_Base_SetConfig+0x11c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a28      	ldr	r2, [pc, #160]	; (8002298 <TIM_Base_SetConfig+0x120>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d017      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a27      	ldr	r2, [pc, #156]	; (800229c <TIM_Base_SetConfig+0x124>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a26      	ldr	r2, [pc, #152]	; (80022a0 <TIM_Base_SetConfig+0x128>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <TIM_Base_SetConfig+0x12c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a24      	ldr	r2, [pc, #144]	; (80022a8 <TIM_Base_SetConfig+0x130>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a23      	ldr	r2, [pc, #140]	; (80022ac <TIM_Base_SetConfig+0x134>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a22      	ldr	r2, [pc, #136]	; (80022b0 <TIM_Base_SetConfig+0x138>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <TIM_Base_SetConfig+0x110>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <TIM_Base_SetConfig+0xf8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0b      	ldr	r2, [pc, #44]	; (8002298 <TIM_Base_SetConfig+0x120>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d103      	bne.n	8002278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	615a      	str	r2, [r3, #20]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	40010000 	.word	0x40010000
 800228c:	40000400 	.word	0x40000400
 8002290:	40000800 	.word	0x40000800
 8002294:	40000c00 	.word	0x40000c00
 8002298:	40010400 	.word	0x40010400
 800229c:	40014000 	.word	0x40014000
 80022a0:	40014400 	.word	0x40014400
 80022a4:	40014800 	.word	0x40014800
 80022a8:	40001800 	.word	0x40001800
 80022ac:	40001c00 	.word	0x40001c00
 80022b0:	40002000 	.word	0x40002000

080022b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bc80      	pop	{r7}
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr

080022d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d101      	bne.n	80022ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e03f      	b.n	800236a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d106      	bne.n	8002304 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f7fe fb3e 	bl	8000980 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2224      	movs	r2, #36	; 0x24
 8002308:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800231a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f000 f829 	bl	8002374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	691a      	ldr	r2, [r3, #16]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002330:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	695a      	ldr	r2, [r3, #20]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002340:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002350:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	430a      	orrs	r2, r1
 8002390:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80023b4:	f023 030c 	bic.w	r3, r3, #12
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	430b      	orrs	r3, r1
 80023c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	699a      	ldr	r2, [r3, #24]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a57      	ldr	r2, [pc, #348]	; (800253c <UART_SetConfig+0x1c8>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d004      	beq.n	80023ec <UART_SetConfig+0x78>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a56      	ldr	r2, [pc, #344]	; (8002540 <UART_SetConfig+0x1cc>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d103      	bne.n	80023f4 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023ec:	f7ff fc80 	bl	8001cf0 <HAL_RCC_GetPCLK2Freq>
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	e002      	b.n	80023fa <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023f4:	f7ff fc5a 	bl	8001cac <HAL_RCC_GetPCLK1Freq>
 80023f8:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002402:	d14c      	bne.n	800249e <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	009a      	lsls	r2, r3, #2
 800240e:	441a      	add	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	fbb2 f3f3 	udiv	r3, r2, r3
 800241a:	4a4a      	ldr	r2, [pc, #296]	; (8002544 <UART_SetConfig+0x1d0>)
 800241c:	fba2 2303 	umull	r2, r3, r2, r3
 8002420:	095b      	lsrs	r3, r3, #5
 8002422:	0119      	lsls	r1, r3, #4
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4613      	mov	r3, r2
 8002428:	009b      	lsls	r3, r3, #2
 800242a:	4413      	add	r3, r2
 800242c:	009a      	lsls	r2, r3, #2
 800242e:	441a      	add	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fbb2 f2f3 	udiv	r2, r2, r3
 800243a:	4b42      	ldr	r3, [pc, #264]	; (8002544 <UART_SetConfig+0x1d0>)
 800243c:	fba3 0302 	umull	r0, r3, r3, r2
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	2064      	movs	r0, #100	; 0x64
 8002444:	fb00 f303 	mul.w	r3, r0, r3
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	3332      	adds	r3, #50	; 0x32
 800244e:	4a3d      	ldr	r2, [pc, #244]	; (8002544 <UART_SetConfig+0x1d0>)
 8002450:	fba2 2303 	umull	r2, r3, r2, r3
 8002454:	095b      	lsrs	r3, r3, #5
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800245c:	4419      	add	r1, r3
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	009a      	lsls	r2, r3, #2
 8002468:	441a      	add	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	fbb2 f2f3 	udiv	r2, r2, r3
 8002474:	4b33      	ldr	r3, [pc, #204]	; (8002544 <UART_SetConfig+0x1d0>)
 8002476:	fba3 0302 	umull	r0, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2064      	movs	r0, #100	; 0x64
 800247e:	fb00 f303 	mul.w	r3, r0, r3
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	3332      	adds	r3, #50	; 0x32
 8002488:	4a2e      	ldr	r2, [pc, #184]	; (8002544 <UART_SetConfig+0x1d0>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	f003 0207 	and.w	r2, r3, #7
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	440a      	add	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800249c:	e04a      	b.n	8002534 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4613      	mov	r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	4413      	add	r3, r2
 80024a6:	009a      	lsls	r2, r3, #2
 80024a8:	441a      	add	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b4:	4a23      	ldr	r2, [pc, #140]	; (8002544 <UART_SetConfig+0x1d0>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	0119      	lsls	r1, r3, #4
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4613      	mov	r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	4413      	add	r3, r2
 80024c6:	009a      	lsls	r2, r3, #2
 80024c8:	441a      	add	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024d4:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <UART_SetConfig+0x1d0>)
 80024d6:	fba3 0302 	umull	r0, r3, r3, r2
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2064      	movs	r0, #100	; 0x64
 80024de:	fb00 f303 	mul.w	r3, r0, r3
 80024e2:	1ad3      	subs	r3, r2, r3
 80024e4:	011b      	lsls	r3, r3, #4
 80024e6:	3332      	adds	r3, #50	; 0x32
 80024e8:	4a16      	ldr	r2, [pc, #88]	; (8002544 <UART_SetConfig+0x1d0>)
 80024ea:	fba2 2303 	umull	r2, r3, r2, r3
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f4:	4419      	add	r1, r3
 80024f6:	68fa      	ldr	r2, [r7, #12]
 80024f8:	4613      	mov	r3, r2
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	009a      	lsls	r2, r3, #2
 8002500:	441a      	add	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	fbb2 f2f3 	udiv	r2, r2, r3
 800250c:	4b0d      	ldr	r3, [pc, #52]	; (8002544 <UART_SetConfig+0x1d0>)
 800250e:	fba3 0302 	umull	r0, r3, r3, r2
 8002512:	095b      	lsrs	r3, r3, #5
 8002514:	2064      	movs	r0, #100	; 0x64
 8002516:	fb00 f303 	mul.w	r3, r0, r3
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	011b      	lsls	r3, r3, #4
 800251e:	3332      	adds	r3, #50	; 0x32
 8002520:	4a08      	ldr	r2, [pc, #32]	; (8002544 <UART_SetConfig+0x1d0>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	095b      	lsrs	r3, r3, #5
 8002528:	f003 020f 	and.w	r2, r3, #15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	440a      	add	r2, r1
 8002532:	609a      	str	r2, [r3, #8]
}
 8002534:	bf00      	nop
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40011000 	.word	0x40011000
 8002540:	40011400 	.word	0x40011400
 8002544:	51eb851f 	.word	0x51eb851f

08002548 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002548:	b084      	sub	sp, #16
 800254a:	b580      	push	{r7, lr}
 800254c:	b084      	sub	sp, #16
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
 8002552:	f107 001c 	add.w	r0, r7, #28
 8002556:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800255a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800255c:	2b01      	cmp	r3, #1
 800255e:	d122      	bne.n	80025a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002574:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800258a:	2b01      	cmp	r3, #1
 800258c:	d105      	bne.n	800259a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fa46 	bl	8002a2c <USB_CoreReset>
 80025a0:	4603      	mov	r3, r0
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e010      	b.n	80025c8 <USB_CoreInit+0x80>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fa3a 	bl	8002a2c <USB_CoreReset>
 80025b8:	4603      	mov	r3, r0
 80025ba:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d10b      	bne.n	80025e6 <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f043 0206 	orr.w	r2, r3, #6
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f043 0220 	orr.w	r2, r3, #32
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80025e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025f2:	b004      	add	sp, #16
 80025f4:	4770      	bx	lr

080025f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 0201 	bic.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bc80      	pop	{r7}
 8002614:	4770      	bx	lr

08002616 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	60da      	str	r2, [r3, #12]
 8002640:	e00b      	b.n	800265a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	60da      	str	r2, [r3, #12]
 8002654:	e001      	b.n	800265a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e003      	b.n	8002662 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800265a:	2032      	movs	r0, #50	; 0x32
 800265c:	f7fe fb1a 	bl	8000c94 <HAL_Delay>

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800266c:	b084      	sub	sp, #16
 800266e:	b580      	push	{r7, lr}
 8002670:	b086      	sub	sp, #24
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
 8002676:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800267a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002686:	2300      	movs	r3, #0
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e009      	b.n	80026a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	3340      	adds	r3, #64	; 0x40
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	2200      	movs	r2, #0
 8002698:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	3301      	adds	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	2b0e      	cmp	r3, #14
 80026a4:	d9f2      	bls.n	800268c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80026a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d11c      	bne.n	80026e6 <USB_DevInit+0x7a>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ba:	f043 0302 	orr.w	r3, r3, #2
 80026be:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026dc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	639a      	str	r2, [r3, #56]	; 0x38
 80026e4:	e00b      	b.n	80026fe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002704:	461a      	mov	r2, r3
 8002706:	2300      	movs	r3, #0
 8002708:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002710:	4619      	mov	r1, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002718:	461a      	mov	r2, r3
 800271a:	680b      	ldr	r3, [r1, #0]
 800271c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800271e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10c      	bne.n	800273e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d104      	bne.n	8002734 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800272a:	2100      	movs	r1, #0
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f945 	bl	80029bc <USB_SetDevSpeed>
 8002732:	e008      	b.n	8002746 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002734:	2101      	movs	r1, #1
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f940 	bl	80029bc <USB_SetDevSpeed>
 800273c:	e003      	b.n	8002746 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800273e:	2103      	movs	r1, #3
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f93b 	bl	80029bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002746:	2110      	movs	r1, #16
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f8f3 	bl	8002934 <USB_FlushTxFifo>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f90f 	bl	800297c <USB_FlushRxFifo>
 800275e:	4603      	mov	r3, r0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d001      	beq.n	8002768 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800276e:	461a      	mov	r2, r3
 8002770:	2300      	movs	r3, #0
 8002772:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800277a:	461a      	mov	r2, r3
 800277c:	2300      	movs	r3, #0
 800277e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002786:	461a      	mov	r2, r3
 8002788:	2300      	movs	r3, #0
 800278a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800278c:	2300      	movs	r3, #0
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	e043      	b.n	800281a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	015a      	lsls	r2, r3, #5
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027a8:	d118      	bne.n	80027dc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10a      	bne.n	80027c6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027bc:	461a      	mov	r2, r3
 80027be:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	e013      	b.n	80027ee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	015a      	lsls	r2, r3, #5
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4413      	add	r3, r2
 80027ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d2:	461a      	mov	r2, r3
 80027d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027d8:	6013      	str	r3, [r2, #0]
 80027da:	e008      	b.n	80027ee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027e8:	461a      	mov	r2, r3
 80027ea:	2300      	movs	r3, #0
 80027ec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027fa:	461a      	mov	r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	015a      	lsls	r2, r3, #5
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800280c:	461a      	mov	r2, r3
 800280e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002812:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	3301      	adds	r3, #1
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	429a      	cmp	r2, r3
 8002820:	d3b7      	bcc.n	8002792 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e043      	b.n	80028b0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800283a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800283e:	d118      	bne.n	8002872 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10a      	bne.n	800285c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	015a      	lsls	r2, r3, #5
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002852:	461a      	mov	r2, r3
 8002854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e013      	b.n	8002884 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002868:	461a      	mov	r2, r3
 800286a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800286e:	6013      	str	r3, [r2, #0]
 8002870:	e008      	b.n	8002884 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800287e:	461a      	mov	r2, r3
 8002880:	2300      	movs	r3, #0
 8002882:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	015a      	lsls	r2, r3, #5
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4413      	add	r3, r2
 800288c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002890:	461a      	mov	r2, r3
 8002892:	2300      	movs	r3, #0
 8002894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4413      	add	r3, r2
 800289e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028a2:	461a      	mov	r2, r3
 80028a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028a8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	3301      	adds	r3, #1
 80028ae:	613b      	str	r3, [r7, #16]
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d3b7      	bcc.n	8002828 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028ca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80028d8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d105      	bne.n	80028ec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	699b      	ldr	r3, [r3, #24]
 80028e4:	f043 0210 	orr.w	r2, r3, #16
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	4b0f      	ldr	r3, [pc, #60]	; (8002930 <USB_DevInit+0x2c4>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80028f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	f043 0208 	orr.w	r2, r3, #8
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800290a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d107      	bne.n	8002920 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699b      	ldr	r3, [r3, #24]
 8002914:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002920:	7dfb      	ldrb	r3, [r7, #23]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3718      	adds	r7, #24
 8002926:	46bd      	mov	sp, r7
 8002928:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800292c:	b004      	add	sp, #16
 800292e:	4770      	bx	lr
 8002930:	803c3800 	.word	0x803c3800

08002934 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	019b      	lsls	r3, r3, #6
 8002946:	f043 0220 	orr.w	r2, r3, #32
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	3301      	adds	r3, #1
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4a08      	ldr	r2, [pc, #32]	; (8002978 <USB_FlushTxFifo+0x44>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d901      	bls.n	8002960 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e006      	b.n	800296e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b20      	cmp	r3, #32
 800296a:	d0f0      	beq.n	800294e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	00030d40 	.word	0x00030d40

0800297c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2210      	movs	r2, #16
 800298c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	3301      	adds	r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	4a08      	ldr	r2, [pc, #32]	; (80029b8 <USB_FlushRxFifo+0x3c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e006      	b.n	80029ae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f003 0310 	and.w	r3, r3, #16
 80029a8:	2b10      	cmp	r3, #16
 80029aa:	d0f0      	beq.n	800298e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	00030d40 	.word	0x00030d40

080029bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	68f9      	ldr	r1, [r7, #12]
 80029d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80029dc:	4313      	orrs	r3, r2
 80029de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3714      	adds	r7, #20
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8002a06:	f023 0303 	bic.w	r3, r3, #3
 8002a0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a1a:	f043 0302 	orr.w	r3, r3, #2
 8002a1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bc80      	pop	{r7}
 8002a2a:	4770      	bx	lr

08002a2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a12      	ldr	r2, [pc, #72]	; (8002a8c <USB_CoreReset+0x60>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d901      	bls.n	8002a4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e01b      	b.n	8002a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	daf2      	bge.n	8002a38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f043 0201 	orr.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3301      	adds	r3, #1
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <USB_CoreReset+0x60>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e006      	b.n	8002a82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d0f0      	beq.n	8002a62 <USB_CoreReset+0x36>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr
 8002a8c:	00030d40 	.word	0x00030d40

08002a90 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a96:	f3ef 8305 	mrs	r3, IPSR
 8002a9a:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aa2:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa6:	607b      	str	r3, [r7, #4]
  return(result);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <osKernelInitialize+0x32>
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <osKernelInitialize+0x60>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d109      	bne.n	8002aca <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ab6:	f3ef 8311 	mrs	r3, BASEPRI
 8002aba:	603b      	str	r3, [r7, #0]
  return(result);
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002ac2:	f06f 0305 	mvn.w	r3, #5
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	e00c      	b.n	8002ae4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002aca:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <osKernelInitialize+0x60>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d105      	bne.n	8002ade <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <osKernelInitialize+0x60>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e002      	b.n	8002ae4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002ade:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr
 8002af0:	20000030 	.word	0x20000030

08002af4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002afa:	f3ef 8305 	mrs	r3, IPSR
 8002afe:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b00:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10f      	bne.n	8002b26 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b06:	f3ef 8310 	mrs	r3, PRIMASK
 8002b0a:	607b      	str	r3, [r7, #4]
  return(result);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <osKernelStart+0x32>
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <osKernelStart+0x64>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d109      	bne.n	8002b2e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8002b1e:	603b      	str	r3, [r7, #0]
  return(result);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d003      	beq.n	8002b2e <osKernelStart+0x3a>
    stat = osErrorISR;
 8002b26:	f06f 0305 	mvn.w	r3, #5
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	e00e      	b.n	8002b4c <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <osKernelStart+0x64>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d107      	bne.n	8002b46 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002b36:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <osKernelStart+0x64>)
 8002b38:	2202      	movs	r2, #2
 8002b3a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002b3c:	f001 fa00 	bl	8003f40 <vTaskStartScheduler>
      stat = osOK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	e002      	b.n	8002b4c <osKernelStart+0x58>
    } else {
      stat = osError;
 8002b46:	f04f 33ff 	mov.w	r3, #4294967295
 8002b4a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	20000030 	.word	0x20000030

08002b5c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002b62:	f3ef 8305 	mrs	r3, IPSR
 8002b66:	60bb      	str	r3, [r7, #8]
  return(result);
 8002b68:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10f      	bne.n	8002b8e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b72:	607b      	str	r3, [r7, #4]
  return(result);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <osKernelGetTickCount+0x32>
 8002b7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ba8 <osKernelGetTickCount+0x4c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d109      	bne.n	8002b96 <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002b82:	f3ef 8311 	mrs	r3, BASEPRI
 8002b86:	603b      	str	r3, [r7, #0]
  return(result);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d003      	beq.n	8002b96 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8002b8e:	f001 faf3 	bl	8004178 <xTaskGetTickCountFromISR>
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	e002      	b.n	8002b9c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8002b96:	f001 fae1 	bl	800415c <xTaskGetTickCount>
 8002b9a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20000030 	.word	0x20000030

08002bac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b092      	sub	sp, #72	; 0x48
 8002bb0:	af04      	add	r7, sp, #16
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bbc:	f3ef 8305 	mrs	r3, IPSR
 8002bc0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 8094 	bne.w	8002cf2 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bca:	f3ef 8310 	mrs	r3, PRIMASK
 8002bce:	623b      	str	r3, [r7, #32]
  return(result);
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f040 808d 	bne.w	8002cf2 <osThreadNew+0x146>
 8002bd8:	4b48      	ldr	r3, [pc, #288]	; (8002cfc <osThreadNew+0x150>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d106      	bne.n	8002bee <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002be0:	f3ef 8311 	mrs	r3, BASEPRI
 8002be4:	61fb      	str	r3, [r7, #28]
  return(result);
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f040 8082 	bne.w	8002cf2 <osThreadNew+0x146>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d07e      	beq.n	8002cf2 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002bf4:	2380      	movs	r3, #128	; 0x80
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002bf8:	2318      	movs	r3, #24
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002c00:	f107 031b 	add.w	r3, r7, #27
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d045      	beq.n	8002c9e <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <osThreadNew+0x74>
        name = attr->name;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <osThreadNew+0x9a>
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	2b38      	cmp	r3, #56	; 0x38
 8002c38:	d805      	bhi.n	8002c46 <osThreadNew+0x9a>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <osThreadNew+0x9e>
        return (NULL);
 8002c46:	2300      	movs	r3, #0
 8002c48:	e054      	b.n	8002cf4 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	089b      	lsrs	r3, r3, #2
 8002c58:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00e      	beq.n	8002c80 <osThreadNew+0xd4>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b5b      	cmp	r3, #91	; 0x5b
 8002c68:	d90a      	bls.n	8002c80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d006      	beq.n	8002c80 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <osThreadNew+0xd4>
        mem = 1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c7e:	e010      	b.n	8002ca2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10c      	bne.n	8002ca2 <osThreadNew+0xf6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d108      	bne.n	8002ca2 <osThreadNew+0xf6>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d104      	bne.n	8002ca2 <osThreadNew+0xf6>
          mem = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c9c:	e001      	b.n	8002ca2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d110      	bne.n	8002cca <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002cb0:	9202      	str	r2, [sp, #8]
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cbc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 fe6a 	bl	8003998 <xTaskCreateStatic>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	e013      	b.n	8002cf2 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d110      	bne.n	8002cf2 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	b29a      	uxth	r2, r3
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ce2:	68f8      	ldr	r0, [r7, #12]
 8002ce4:	f000 feb1 	bl	8003a4a <xTaskCreate>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d001      	beq.n	8002cf2 <osThreadNew+0x146>
          hTask = NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002cf2:	697b      	ldr	r3, [r7, #20]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3738      	adds	r7, #56	; 0x38
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000030 	.word	0x20000030

08002d00 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d0c:	f3ef 8305 	mrs	r3, IPSR
 8002d10:	617b      	str	r3, [r7, #20]
  return(result);
 8002d12:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d10f      	bne.n	8002d38 <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d18:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1c:	613b      	str	r3, [r7, #16]
  return(result);
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <osThreadSuspend+0x38>
 8002d24:	4b0f      	ldr	r3, [pc, #60]	; (8002d64 <osThreadSuspend+0x64>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d109      	bne.n	8002d40 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d2c:	f3ef 8311 	mrs	r3, BASEPRI
 8002d30:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8002d38:	f06f 0305 	mvn.w	r3, #5
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	e00b      	b.n	8002d58 <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d103      	bne.n	8002d4e <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8002d46:	f06f 0303 	mvn.w	r3, #3
 8002d4a:	61fb      	str	r3, [r7, #28]
 8002d4c:	e004      	b.n	8002d58 <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8002d52:	69b8      	ldr	r0, [r7, #24]
 8002d54:	f000 ffe8 	bl	8003d28 <vTaskSuspend>
  }

  return (stat);
 8002d58:	69fb      	ldr	r3, [r7, #28]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3720      	adds	r7, #32
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	20000030 	.word	0x20000030

08002d68 <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b088      	sub	sp, #32
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d74:	f3ef 8305 	mrs	r3, IPSR
 8002d78:	617b      	str	r3, [r7, #20]
  return(result);
 8002d7a:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d10f      	bne.n	8002da0 <osThreadResume+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d80:	f3ef 8310 	mrs	r3, PRIMASK
 8002d84:	613b      	str	r3, [r7, #16]
  return(result);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <osThreadResume+0x38>
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	; (8002dcc <osThreadResume+0x64>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d109      	bne.n	8002da8 <osThreadResume+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d94:	f3ef 8311 	mrs	r3, BASEPRI
 8002d98:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <osThreadResume+0x40>
    stat = osErrorISR;
 8002da0:	f06f 0305 	mvn.w	r3, #5
 8002da4:	61fb      	str	r3, [r7, #28]
 8002da6:	e00b      	b.n	8002dc0 <osThreadResume+0x58>
  }
  else if (hTask == NULL) {
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d103      	bne.n	8002db6 <osThreadResume+0x4e>
    stat = osErrorParameter;
 8002dae:	f06f 0303 	mvn.w	r3, #3
 8002db2:	61fb      	str	r3, [r7, #28]
 8002db4:	e004      	b.n	8002dc0 <osThreadResume+0x58>
  }
  else {
    stat = osOK;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
    vTaskResume (hTask);
 8002dba:	69b8      	ldr	r0, [r7, #24]
 8002dbc:	f001 f862 	bl	8003e84 <vTaskResume>
  }

  return (stat);
 8002dc0:	69fb      	ldr	r3, [r7, #28]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	20000030 	.word	0x20000030

08002dd0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002dd8:	f3ef 8305 	mrs	r3, IPSR
 8002ddc:	613b      	str	r3, [r7, #16]
  return(result);
 8002dde:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10f      	bne.n	8002e04 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002de4:	f3ef 8310 	mrs	r3, PRIMASK
 8002de8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d109      	bne.n	8002e04 <osDelay+0x34>
 8002df0:	4b0d      	ldr	r3, [pc, #52]	; (8002e28 <osDelay+0x58>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d109      	bne.n	8002e0c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002df8:	f3ef 8311 	mrs	r3, BASEPRI
 8002dfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <osDelay+0x3c>
    stat = osErrorISR;
 8002e04:	f06f 0305 	mvn.w	r3, #5
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e007      	b.n	8002e1c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <osDelay+0x4c>
      vTaskDelay(ticks);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 ff52 	bl	8003cc0 <vTaskDelay>
    }
  }

  return (stat);
 8002e1c:	697b      	ldr	r3, [r7, #20]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	20000030 	.word	0x20000030

08002e2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e2c:	b480      	push	{r7}
 8002e2e:	b085      	sub	sp, #20
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a06      	ldr	r2, [pc, #24]	; (8002e54 <vApplicationGetIdleTaskMemory+0x28>)
 8002e3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4a05      	ldr	r2, [pc, #20]	; (8002e58 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr
 8002e54:	20000034 	.word	0x20000034
 8002e58:	20000090 	.word	0x20000090

08002e5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <vApplicationGetTimerTaskMemory+0x2c>)
 8002e6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4a06      	ldr	r2, [pc, #24]	; (8002e8c <vApplicationGetTimerTaskMemory+0x30>)
 8002e72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e7a:	601a      	str	r2, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bc80      	pop	{r7}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000290 	.word	0x20000290
 8002e8c:	200002ec 	.word	0x200002ec

08002e90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f103 0208 	add.w	r2, r3, #8
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f103 0208 	add.w	r2, r3, #8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f103 0208 	add.w	r2, r3, #8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr

08002ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b085      	sub	sp, #20
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
 8002eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689a      	ldr	r2, [r3, #8]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	601a      	str	r2, [r3, #0]
}
 8002f22:	bf00      	nop
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bc80      	pop	{r7}
 8002f2a:	4770      	bx	lr

08002f2c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b085      	sub	sp, #20
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f42:	d103      	bne.n	8002f4c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	e00c      	b.n	8002f66 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	3308      	adds	r3, #8
 8002f50:	60fb      	str	r3, [r7, #12]
 8002f52:	e002      	b.n	8002f5a <vListInsert+0x2e>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d2f6      	bcs.n	8002f54 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	683a      	ldr	r2, [r7, #0]
 8002f80:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	601a      	str	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6892      	ldr	r2, [r2, #8]
 8002fb2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6852      	ldr	r2, [r2, #4]
 8002fbc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d103      	bne.n	8002fd0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	1e5a      	subs	r2, r3, #1
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bc80      	pop	{r7}
 8002fec:	4770      	bx	lr
	...

08002ff0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d109      	bne.n	8003018 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	e7fe      	b.n	8003016 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003018:	f002 f8b6 	bl	8005188 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003024:	68f9      	ldr	r1, [r7, #12]
 8003026:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003028:	fb01 f303 	mul.w	r3, r1, r3
 800302c:	441a      	add	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003048:	3b01      	subs	r3, #1
 800304a:	68f9      	ldr	r1, [r7, #12]
 800304c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800304e:	fb01 f303 	mul.w	r3, r1, r3
 8003052:	441a      	add	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	22ff      	movs	r2, #255	; 0xff
 800305c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	22ff      	movs	r2, #255	; 0xff
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d114      	bne.n	8003098 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01a      	beq.n	80030ac <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3310      	adds	r3, #16
 800307a:	4618      	mov	r0, r3
 800307c:	f001 f9f6 	bl	800446c <xTaskRemoveFromEventList>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d012      	beq.n	80030ac <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003086:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <xQueueGenericReset+0xcc>)
 8003088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	e009      	b.n	80030ac <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	3310      	adds	r3, #16
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fef7 	bl	8002e90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	3324      	adds	r3, #36	; 0x24
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff fef2 	bl	8002e90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80030ac:	f002 f89a 	bl	80051e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80030b0:	2301      	movs	r3, #1
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	e000ed04 	.word	0xe000ed04

080030c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08e      	sub	sp, #56	; 0x38
 80030c4:	af02      	add	r7, sp, #8
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d109      	bne.n	80030e8 <xQueueGenericCreateStatic+0x28>
 80030d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030d8:	f383 8811 	msr	BASEPRI, r3
 80030dc:	f3bf 8f6f 	isb	sy
 80030e0:	f3bf 8f4f 	dsb	sy
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e6:	e7fe      	b.n	80030e6 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <xQueueGenericCreateStatic+0x42>
 80030ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f2:	f383 8811 	msr	BASEPRI, r3
 80030f6:	f3bf 8f6f 	isb	sy
 80030fa:	f3bf 8f4f 	dsb	sy
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003100:	e7fe      	b.n	8003100 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d002      	beq.n	800310e <xQueueGenericCreateStatic+0x4e>
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <xQueueGenericCreateStatic+0x52>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <xQueueGenericCreateStatic+0x54>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <xQueueGenericCreateStatic+0x6c>
 8003118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	623b      	str	r3, [r7, #32]
 800312a:	e7fe      	b.n	800312a <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <xQueueGenericCreateStatic+0x78>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <xQueueGenericCreateStatic+0x7c>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <xQueueGenericCreateStatic+0x7e>
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <xQueueGenericCreateStatic+0x96>
 8003142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003146:	f383 8811 	msr	BASEPRI, r3
 800314a:	f3bf 8f6f 	isb	sy
 800314e:	f3bf 8f4f 	dsb	sy
 8003152:	61fb      	str	r3, [r7, #28]
 8003154:	e7fe      	b.n	8003154 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003156:	2350      	movs	r3, #80	; 0x50
 8003158:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2b50      	cmp	r3, #80	; 0x50
 800315e:	d009      	beq.n	8003174 <xQueueGenericCreateStatic+0xb4>
 8003160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003164:	f383 8811 	msr	BASEPRI, r3
 8003168:	f3bf 8f6f 	isb	sy
 800316c:	f3bf 8f4f 	dsb	sy
 8003170:	61bb      	str	r3, [r7, #24]
 8003172:	e7fe      	b.n	8003172 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	2b00      	cmp	r3, #0
 800317c:	d00d      	beq.n	800319a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003186:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800318a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	4613      	mov	r3, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	68b9      	ldr	r1, [r7, #8]
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f805 	bl	80031a4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800319a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800319c:	4618      	mov	r0, r3
 800319e:	3730      	adds	r7, #48	; 0x30
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
 80031b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	e002      	b.n	80031c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	68fa      	ldr	r2, [r7, #12]
 80031ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80031d2:	2101      	movs	r1, #1
 80031d4:	69b8      	ldr	r0, [r7, #24]
 80031d6:	f7ff ff0b 	bl	8002ff0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80031e2:	bf00      	nop
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08e      	sub	sp, #56	; 0x38
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
 80031f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80031fa:	2300      	movs	r3, #0
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003204:	2b00      	cmp	r3, #0
 8003206:	d109      	bne.n	800321c <xQueueGenericSend+0x30>
 8003208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320c:	f383 8811 	msr	BASEPRI, r3
 8003210:	f3bf 8f6f 	isb	sy
 8003214:	f3bf 8f4f 	dsb	sy
 8003218:	62bb      	str	r3, [r7, #40]	; 0x28
 800321a:	e7fe      	b.n	800321a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d103      	bne.n	800322a <xQueueGenericSend+0x3e>
 8003222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <xQueueGenericSend+0x42>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <xQueueGenericSend+0x44>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <xQueueGenericSend+0x5c>
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	627b      	str	r3, [r7, #36]	; 0x24
 8003246:	e7fe      	b.n	8003246 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	2b02      	cmp	r3, #2
 800324c:	d103      	bne.n	8003256 <xQueueGenericSend+0x6a>
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	2b01      	cmp	r3, #1
 8003254:	d101      	bne.n	800325a <xQueueGenericSend+0x6e>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <xQueueGenericSend+0x70>
 800325a:	2300      	movs	r3, #0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d109      	bne.n	8003274 <xQueueGenericSend+0x88>
 8003260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003264:	f383 8811 	msr	BASEPRI, r3
 8003268:	f3bf 8f6f 	isb	sy
 800326c:	f3bf 8f4f 	dsb	sy
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	e7fe      	b.n	8003272 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003274:	f001 fab4 	bl	80047e0 <xTaskGetSchedulerState>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d102      	bne.n	8003284 <xQueueGenericSend+0x98>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <xQueueGenericSend+0x9c>
 8003284:	2301      	movs	r3, #1
 8003286:	e000      	b.n	800328a <xQueueGenericSend+0x9e>
 8003288:	2300      	movs	r3, #0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <xQueueGenericSend+0xb6>
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	61fb      	str	r3, [r7, #28]
 80032a0:	e7fe      	b.n	80032a0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80032a2:	f001 ff71 	bl	8005188 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d302      	bcc.n	80032b8 <xQueueGenericSend+0xcc>
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d129      	bne.n	800330c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	68b9      	ldr	r1, [r7, #8]
 80032bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032be:	f000 f9ff 	bl	80036c0 <prvCopyDataToQueue>
 80032c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d010      	beq.n	80032ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ce:	3324      	adds	r3, #36	; 0x24
 80032d0:	4618      	mov	r0, r3
 80032d2:	f001 f8cb 	bl	800446c <xTaskRemoveFromEventList>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d013      	beq.n	8003304 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80032dc:	4b3f      	ldr	r3, [pc, #252]	; (80033dc <xQueueGenericSend+0x1f0>)
 80032de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	e00a      	b.n	8003304 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80032f4:	4b39      	ldr	r3, [pc, #228]	; (80033dc <xQueueGenericSend+0x1f0>)
 80032f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	f3bf 8f4f 	dsb	sy
 8003300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003304:	f001 ff6e 	bl	80051e4 <vPortExitCritical>
				return pdPASS;
 8003308:	2301      	movs	r3, #1
 800330a:	e063      	b.n	80033d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d103      	bne.n	800331a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003312:	f001 ff67 	bl	80051e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003316:	2300      	movs	r3, #0
 8003318:	e05c      	b.n	80033d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800331a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331c:	2b00      	cmp	r3, #0
 800331e:	d106      	bne.n	800332e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003320:	f107 0314 	add.w	r3, r7, #20
 8003324:	4618      	mov	r0, r3
 8003326:	f001 f903 	bl	8004530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800332a:	2301      	movs	r3, #1
 800332c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800332e:	f001 ff59 	bl	80051e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003332:	f000 fe69 	bl	8004008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003336:	f001 ff27 	bl	8005188 <vPortEnterCritical>
 800333a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003340:	b25b      	sxtb	r3, r3
 8003342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003346:	d103      	bne.n	8003350 <xQueueGenericSend+0x164>
 8003348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003356:	b25b      	sxtb	r3, r3
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d103      	bne.n	8003366 <xQueueGenericSend+0x17a>
 800335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003366:	f001 ff3d 	bl	80051e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800336a:	1d3a      	adds	r2, r7, #4
 800336c:	f107 0314 	add.w	r3, r7, #20
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f001 f8f2 	bl	800455c <xTaskCheckForTimeOut>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d124      	bne.n	80033c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800337e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003380:	f000 fa96 	bl	80038b0 <prvIsQueueFull>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d018      	beq.n	80033bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	3310      	adds	r3, #16
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4611      	mov	r1, r2
 8003392:	4618      	mov	r0, r3
 8003394:	f001 f81c 	bl	80043d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800339a:	f000 fa21 	bl	80037e0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800339e:	f000 fe41 	bl	8004024 <xTaskResumeAll>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f47f af7c 	bne.w	80032a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80033aa:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <xQueueGenericSend+0x1f0>)
 80033ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	f3bf 8f4f 	dsb	sy
 80033b6:	f3bf 8f6f 	isb	sy
 80033ba:	e772      	b.n	80032a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80033bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033be:	f000 fa0f 	bl	80037e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033c2:	f000 fe2f 	bl	8004024 <xTaskResumeAll>
 80033c6:	e76c      	b.n	80032a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80033c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80033ca:	f000 fa09 	bl	80037e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80033ce:	f000 fe29 	bl	8004024 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80033d2:	2300      	movs	r3, #0
		}
	}
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3738      	adds	r7, #56	; 0x38
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	e000ed04 	.word	0xe000ed04

080033e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08e      	sub	sp, #56	; 0x38
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d109      	bne.n	800340c <xQueueGenericSendFromISR+0x2c>
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	e7fe      	b.n	800340a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d103      	bne.n	800341a <xQueueGenericSendFromISR+0x3a>
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <xQueueGenericSendFromISR+0x3e>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <xQueueGenericSendFromISR+0x40>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d109      	bne.n	8003438 <xQueueGenericSendFromISR+0x58>
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	623b      	str	r3, [r7, #32]
 8003436:	e7fe      	b.n	8003436 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d103      	bne.n	8003446 <xQueueGenericSendFromISR+0x66>
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003442:	2b01      	cmp	r3, #1
 8003444:	d101      	bne.n	800344a <xQueueGenericSendFromISR+0x6a>
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <xQueueGenericSendFromISR+0x6c>
 800344a:	2300      	movs	r3, #0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d109      	bne.n	8003464 <xQueueGenericSendFromISR+0x84>
 8003450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003454:	f383 8811 	msr	BASEPRI, r3
 8003458:	f3bf 8f6f 	isb	sy
 800345c:	f3bf 8f4f 	dsb	sy
 8003460:	61fb      	str	r3, [r7, #28]
 8003462:	e7fe      	b.n	8003462 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003464:	f001 ff4a 	bl	80052fc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003468:	f3ef 8211 	mrs	r2, BASEPRI
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	61ba      	str	r2, [r7, #24]
 800347e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003480:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	429a      	cmp	r2, r3
 800348e:	d302      	bcc.n	8003496 <xQueueGenericSendFromISR+0xb6>
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d12c      	bne.n	80034f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800349c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	68b9      	ldr	r1, [r7, #8]
 80034a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034a6:	f000 f90b 	bl	80036c0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80034aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b2:	d112      	bne.n	80034da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d016      	beq.n	80034ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	3324      	adds	r3, #36	; 0x24
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 ffd3 	bl	800446c <xTaskRemoveFromEventList>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00e      	beq.n	80034ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00b      	beq.n	80034ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	e007      	b.n	80034ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80034da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034de:	3301      	adds	r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	b25a      	sxtb	r2, r3
 80034e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80034ea:	2301      	movs	r3, #1
 80034ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80034ee:	e001      	b.n	80034f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	637b      	str	r3, [r7, #52]	; 0x34
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80034fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003500:	4618      	mov	r0, r3
 8003502:	3738      	adds	r7, #56	; 0x38
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b08c      	sub	sp, #48	; 0x30
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003514:	2300      	movs	r3, #0
 8003516:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800351c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <xQueueReceive+0x2e>
	__asm volatile
 8003522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003526:	f383 8811 	msr	BASEPRI, r3
 800352a:	f3bf 8f6f 	isb	sy
 800352e:	f3bf 8f4f 	dsb	sy
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	e7fe      	b.n	8003534 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d103      	bne.n	8003544 <xQueueReceive+0x3c>
 800353c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <xQueueReceive+0x40>
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <xQueueReceive+0x42>
 8003548:	2300      	movs	r3, #0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <xQueueReceive+0x5a>
 800354e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	61fb      	str	r3, [r7, #28]
 8003560:	e7fe      	b.n	8003560 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003562:	f001 f93d 	bl	80047e0 <xTaskGetSchedulerState>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d102      	bne.n	8003572 <xQueueReceive+0x6a>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d101      	bne.n	8003576 <xQueueReceive+0x6e>
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <xQueueReceive+0x70>
 8003576:	2300      	movs	r3, #0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d109      	bne.n	8003590 <xQueueReceive+0x88>
 800357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003580:	f383 8811 	msr	BASEPRI, r3
 8003584:	f3bf 8f6f 	isb	sy
 8003588:	f3bf 8f4f 	dsb	sy
 800358c:	61bb      	str	r3, [r7, #24]
 800358e:	e7fe      	b.n	800358e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003590:	f001 fdfa 	bl	8005188 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800359a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01f      	beq.n	80035e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80035a4:	f000 f8f6 	bl	8003794 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80035a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035aa:	1e5a      	subs	r2, r3, #1
 80035ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00f      	beq.n	80035d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	3310      	adds	r3, #16
 80035bc:	4618      	mov	r0, r3
 80035be:	f000 ff55 	bl	800446c <xTaskRemoveFromEventList>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80035c8:	4b3c      	ldr	r3, [pc, #240]	; (80036bc <xQueueReceive+0x1b4>)
 80035ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80035d8:	f001 fe04 	bl	80051e4 <vPortExitCritical>
				return pdPASS;
 80035dc:	2301      	movs	r3, #1
 80035de:	e069      	b.n	80036b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80035e6:	f001 fdfd 	bl	80051e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80035ea:	2300      	movs	r3, #0
 80035ec:	e062      	b.n	80036b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80035ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80035f4:	f107 0310 	add.w	r3, r7, #16
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 ff99 	bl	8004530 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80035fe:	2301      	movs	r3, #1
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003602:	f001 fdef 	bl	80051e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003606:	f000 fcff 	bl	8004008 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800360a:	f001 fdbd 	bl	8005188 <vPortEnterCritical>
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003614:	b25b      	sxtb	r3, r3
 8003616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361a:	d103      	bne.n	8003624 <xQueueReceive+0x11c>
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800362a:	b25b      	sxtb	r3, r3
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d103      	bne.n	800363a <xQueueReceive+0x132>
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800363a:	f001 fdd3 	bl	80051e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800363e:	1d3a      	adds	r2, r7, #4
 8003640:	f107 0310 	add.w	r3, r7, #16
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f000 ff88 	bl	800455c <xTaskCheckForTimeOut>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d123      	bne.n	800369a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003654:	f000 f916 	bl	8003884 <prvIsQueueEmpty>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d017      	beq.n	800368e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003660:	3324      	adds	r3, #36	; 0x24
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f000 feb2 	bl	80043d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800366c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800366e:	f000 f8b7 	bl	80037e0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003672:	f000 fcd7 	bl	8004024 <xTaskResumeAll>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d189      	bne.n	8003590 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <xQueueReceive+0x1b4>)
 800367e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	f3bf 8f6f 	isb	sy
 800368c:	e780      	b.n	8003590 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800368e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003690:	f000 f8a6 	bl	80037e0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003694:	f000 fcc6 	bl	8004024 <xTaskResumeAll>
 8003698:	e77a      	b.n	8003590 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800369a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800369c:	f000 f8a0 	bl	80037e0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80036a0:	f000 fcc0 	bl	8004024 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80036a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80036a6:	f000 f8ed 	bl	8003884 <prvIsQueueEmpty>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f43f af6f 	beq.w	8003590 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80036b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3730      	adds	r7, #48	; 0x30
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	e000ed04 	.word	0xe000ed04

080036c0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b086      	sub	sp, #24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d14d      	bne.n	8003782 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f001 f896 	bl	800481c <xTaskPriorityDisinherit>
 80036f0:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e043      	b.n	8003782 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d119      	bne.n	8003734 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6898      	ldr	r0, [r3, #8]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003708:	461a      	mov	r2, r3
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	f002 f82a 	bl	8005764 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689a      	ldr	r2, [r3, #8]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	441a      	add	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	d32b      	bcc.n	8003782 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	e026      	b.n	8003782 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68d8      	ldr	r0, [r3, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	461a      	mov	r2, r3
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	f002 f810 	bl	8005764 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374c:	425b      	negs	r3, r3
 800374e:	441a      	add	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	68da      	ldr	r2, [r3, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	429a      	cmp	r2, r3
 800375e:	d207      	bcs.n	8003770 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	425b      	negs	r3, r3
 800376a:	441a      	add	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b02      	cmp	r3, #2
 8003774:	d105      	bne.n	8003782 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	3b01      	subs	r3, #1
 8003780:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800378a:	697b      	ldr	r3, [r7, #20]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d018      	beq.n	80037d8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68da      	ldr	r2, [r3, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	441a      	add	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68da      	ldr	r2, [r3, #12]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d303      	bcc.n	80037c8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68d9      	ldr	r1, [r3, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	461a      	mov	r2, r3
 80037d2:	6838      	ldr	r0, [r7, #0]
 80037d4:	f001 ffc6 	bl	8005764 <memcpy>
	}
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80037e8:	f001 fcce 	bl	8005188 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037f4:	e011      	b.n	800381a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d012      	beq.n	8003824 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	3324      	adds	r3, #36	; 0x24
 8003802:	4618      	mov	r0, r3
 8003804:	f000 fe32 	bl	800446c <xTaskRemoveFromEventList>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800380e:	f000 ff05 	bl	800461c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003812:	7bfb      	ldrb	r3, [r7, #15]
 8003814:	3b01      	subs	r3, #1
 8003816:	b2db      	uxtb	r3, r3
 8003818:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800381a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	dce9      	bgt.n	80037f6 <prvUnlockQueue+0x16>
 8003822:	e000      	b.n	8003826 <prvUnlockQueue+0x46>
					break;
 8003824:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	22ff      	movs	r2, #255	; 0xff
 800382a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800382e:	f001 fcd9 	bl	80051e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003832:	f001 fca9 	bl	8005188 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800383c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800383e:	e011      	b.n	8003864 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d012      	beq.n	800386e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3310      	adds	r3, #16
 800384c:	4618      	mov	r0, r3
 800384e:	f000 fe0d 	bl	800446c <xTaskRemoveFromEventList>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003858:	f000 fee0 	bl	800461c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800385c:	7bbb      	ldrb	r3, [r7, #14]
 800385e:	3b01      	subs	r3, #1
 8003860:	b2db      	uxtb	r3, r3
 8003862:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003864:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003868:	2b00      	cmp	r3, #0
 800386a:	dce9      	bgt.n	8003840 <prvUnlockQueue+0x60>
 800386c:	e000      	b.n	8003870 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800386e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	22ff      	movs	r2, #255	; 0xff
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003878:	f001 fcb4 	bl	80051e4 <vPortExitCritical>
}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800388c:	f001 fc7c 	bl	8005188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003894:	2b00      	cmp	r3, #0
 8003896:	d102      	bne.n	800389e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003898:	2301      	movs	r3, #1
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e001      	b.n	80038a2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038a2:	f001 fc9f 	bl	80051e4 <vPortExitCritical>

	return xReturn;
 80038a6:	68fb      	ldr	r3, [r7, #12]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038b8:	f001 fc66 	bl	8005188 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d102      	bne.n	80038ce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	e001      	b.n	80038d2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80038ce:	2300      	movs	r3, #0
 80038d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038d2:	f001 fc87 	bl	80051e4 <vPortExitCritical>

	return xReturn;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	e014      	b.n	800391a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80038f0:	4a0e      	ldr	r2, [pc, #56]	; (800392c <vQueueAddToRegistry+0x4c>)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038fc:	490b      	ldr	r1, [pc, #44]	; (800392c <vQueueAddToRegistry+0x4c>)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003906:	4a09      	ldr	r2, [pc, #36]	; (800392c <vQueueAddToRegistry+0x4c>)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003912:	e005      	b.n	8003920 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	3301      	adds	r3, #1
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b07      	cmp	r3, #7
 800391e:	d9e7      	bls.n	80038f0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003920:	bf00      	nop
 8003922:	3714      	adds	r7, #20
 8003924:	46bd      	mov	sp, r7
 8003926:	bc80      	pop	{r7}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	20004dcc 	.word	0x20004dcc

08003930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003930:	b580      	push	{r7, lr}
 8003932:	b086      	sub	sp, #24
 8003934:	af00      	add	r7, sp, #0
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	60b9      	str	r1, [r7, #8]
 800393a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003940:	f001 fc22 	bl	8005188 <vPortEnterCritical>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800394a:	b25b      	sxtb	r3, r3
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d103      	bne.n	800395a <vQueueWaitForMessageRestricted+0x2a>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003960:	b25b      	sxtb	r3, r3
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d103      	bne.n	8003970 <vQueueWaitForMessageRestricted+0x40>
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003970:	f001 fc38 	bl	80051e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003978:	2b00      	cmp	r3, #0
 800397a:	d106      	bne.n	800398a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	3324      	adds	r3, #36	; 0x24
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	4618      	mov	r0, r3
 8003986:	f000 fd47 	bl	8004418 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f7ff ff28 	bl	80037e0 <prvUnlockQueue>
	}
 8003990:	bf00      	nop
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08e      	sub	sp, #56	; 0x38
 800399c:	af04      	add	r7, sp, #16
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80039a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d109      	bne.n	80039c0 <xTaskCreateStatic+0x28>
 80039ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b0:	f383 8811 	msr	BASEPRI, r3
 80039b4:	f3bf 8f6f 	isb	sy
 80039b8:	f3bf 8f4f 	dsb	sy
 80039bc:	623b      	str	r3, [r7, #32]
 80039be:	e7fe      	b.n	80039be <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80039c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <xTaskCreateStatic+0x42>
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	e7fe      	b.n	80039d8 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80039da:	235c      	movs	r3, #92	; 0x5c
 80039dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	2b5c      	cmp	r3, #92	; 0x5c
 80039e2:	d009      	beq.n	80039f8 <xTaskCreateStatic+0x60>
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e7fe      	b.n	80039f6 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01e      	beq.n	8003a3c <xTaskCreateStatic+0xa4>
 80039fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01b      	beq.n	8003a3c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	2202      	movs	r2, #2
 8003a12:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003a16:	2300      	movs	r3, #0
 8003a18:	9303      	str	r3, [sp, #12]
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	9302      	str	r3, [sp, #8]
 8003a1e:	f107 0314 	add.w	r3, r7, #20
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	68b9      	ldr	r1, [r7, #8]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f850 	bl	8003ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a36:	f000 f8d3 	bl	8003be0 <prvAddNewTaskToReadyList>
 8003a3a:	e001      	b.n	8003a40 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a40:	697b      	ldr	r3, [r7, #20]
	}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3728      	adds	r7, #40	; 0x28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b08c      	sub	sp, #48	; 0x30
 8003a4e:	af04      	add	r7, sp, #16
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	603b      	str	r3, [r7, #0]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 fc88 	bl	8005374 <pvPortMalloc>
 8003a64:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00e      	beq.n	8003a8a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a6c:	205c      	movs	r0, #92	; 0x5c
 8003a6e:	f001 fc81 	bl	8005374 <pvPortMalloc>
 8003a72:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a80:	e005      	b.n	8003a8e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a82:	6978      	ldr	r0, [r7, #20]
 8003a84:	f001 fd38 	bl	80054f8 <vPortFree>
 8003a88:	e001      	b.n	8003a8e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d017      	beq.n	8003ac4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	9303      	str	r3, [sp, #12]
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	9302      	str	r3, [sp, #8]
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 f80e 	bl	8003ad4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ab8:	69f8      	ldr	r0, [r7, #28]
 8003aba:	f000 f891 	bl	8003be0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e002      	b.n	8003aca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003aca:	69bb      	ldr	r3, [r7, #24]
	}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3720      	adds	r7, #32
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	461a      	mov	r2, r3
 8003aec:	21a5      	movs	r1, #165	; 0xa5
 8003aee:	f001 fe44 	bl	800577a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003afc:	3b01      	subs	r3, #1
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	f023 0307 	bic.w	r3, r3, #7
 8003b0a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d009      	beq.n	8003b2a <prvInitialiseNewTask+0x56>
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e7fe      	b.n	8003b28 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	61fb      	str	r3, [r7, #28]
 8003b2e:	e012      	b.n	8003b56 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	4413      	add	r3, r2
 8003b36:	7819      	ldrb	r1, [r3, #0]
 8003b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3334      	adds	r3, #52	; 0x34
 8003b40:	460a      	mov	r2, r1
 8003b42:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	4413      	add	r3, r2
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d006      	beq.n	8003b5e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	3301      	adds	r3, #1
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	2b0f      	cmp	r3, #15
 8003b5a:	d9e9      	bls.n	8003b30 <prvInitialiseNewTask+0x5c>
 8003b5c:	e000      	b.n	8003b60 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003b5e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2b37      	cmp	r3, #55	; 0x37
 8003b6c:	d901      	bls.n	8003b72 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b6e:	2337      	movs	r3, #55	; 0x37
 8003b70:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b7c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b80:	2200      	movs	r2, #0
 8003b82:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b86:	3304      	adds	r3, #4
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7ff f9a0 	bl	8002ece <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b90:	3318      	adds	r3, #24
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f99b 	bl	8002ece <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	68f9      	ldr	r1, [r7, #12]
 8003bc0:	69b8      	ldr	r0, [r7, #24]
 8003bc2:	f001 f9f5 	bl	8004fb0 <pxPortInitialiseStack>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003bd8:	bf00      	nop
 8003bda:	3720      	adds	r7, #32
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003be8:	f001 face 	bl	8005188 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bec:	4b2d      	ldr	r3, [pc, #180]	; (8003ca4 <prvAddNewTaskToReadyList+0xc4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	4a2c      	ldr	r2, [pc, #176]	; (8003ca4 <prvAddNewTaskToReadyList+0xc4>)
 8003bf4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bf6:	4b2c      	ldr	r3, [pc, #176]	; (8003ca8 <prvAddNewTaskToReadyList+0xc8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d109      	bne.n	8003c12 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bfe:	4a2a      	ldr	r2, [pc, #168]	; (8003ca8 <prvAddNewTaskToReadyList+0xc8>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <prvAddNewTaskToReadyList+0xc4>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d110      	bne.n	8003c2e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003c0c:	f000 fd2a 	bl	8004664 <prvInitialiseTaskLists>
 8003c10:	e00d      	b.n	8003c2e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003c12:	4b26      	ldr	r3, [pc, #152]	; (8003cac <prvAddNewTaskToReadyList+0xcc>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d109      	bne.n	8003c2e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003c1a:	4b23      	ldr	r3, [pc, #140]	; (8003ca8 <prvAddNewTaskToReadyList+0xc8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d802      	bhi.n	8003c2e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003c28:	4a1f      	ldr	r2, [pc, #124]	; (8003ca8 <prvAddNewTaskToReadyList+0xc8>)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003c2e:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <prvAddNewTaskToReadyList+0xd0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	3301      	adds	r3, #1
 8003c34:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <prvAddNewTaskToReadyList+0xd0>)
 8003c36:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003c38:	4b1d      	ldr	r3, [pc, #116]	; (8003cb0 <prvAddNewTaskToReadyList+0xd0>)
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <prvAddNewTaskToReadyList+0xd4>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d903      	bls.n	8003c54 <prvAddNewTaskToReadyList+0x74>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	4a18      	ldr	r2, [pc, #96]	; (8003cb4 <prvAddNewTaskToReadyList+0xd4>)
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c58:	4613      	mov	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <prvAddNewTaskToReadyList+0xd8>)
 8003c62:	441a      	add	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3304      	adds	r3, #4
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4610      	mov	r0, r2
 8003c6c:	f7ff f93b 	bl	8002ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c70:	f001 fab8 	bl	80051e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c74:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <prvAddNewTaskToReadyList+0xcc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00e      	beq.n	8003c9a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c7c:	4b0a      	ldr	r3, [pc, #40]	; (8003ca8 <prvAddNewTaskToReadyList+0xc8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d207      	bcs.n	8003c9a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c8a:	4b0c      	ldr	r3, [pc, #48]	; (8003cbc <prvAddNewTaskToReadyList+0xdc>)
 8003c8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c90:	601a      	str	r2, [r3, #0]
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c9a:	bf00      	nop
 8003c9c:	3708      	adds	r7, #8
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20000bc0 	.word	0x20000bc0
 8003ca8:	200006ec 	.word	0x200006ec
 8003cac:	20000bcc 	.word	0x20000bcc
 8003cb0:	20000bdc 	.word	0x20000bdc
 8003cb4:	20000bc8 	.word	0x20000bc8
 8003cb8:	200006f0 	.word	0x200006f0
 8003cbc:	e000ed04 	.word	0xe000ed04

08003cc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003cd2:	4b13      	ldr	r3, [pc, #76]	; (8003d20 <vTaskDelay+0x60>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d009      	beq.n	8003cee <vTaskDelay+0x2e>
 8003cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cde:	f383 8811 	msr	BASEPRI, r3
 8003ce2:	f3bf 8f6f 	isb	sy
 8003ce6:	f3bf 8f4f 	dsb	sy
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	e7fe      	b.n	8003cec <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003cee:	f000 f98b 	bl	8004008 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fdfd 	bl	80048f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cfa:	f000 f993 	bl	8004024 <xTaskResumeAll>
 8003cfe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d107      	bne.n	8003d16 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003d06:	4b07      	ldr	r3, [pc, #28]	; (8003d24 <vTaskDelay+0x64>)
 8003d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	20000be8 	.word	0x20000be8
 8003d24:	e000ed04 	.word	0xe000ed04

08003d28 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8003d30:	f001 fa2a 	bl	8005188 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d102      	bne.n	8003d40 <vTaskSuspend+0x18>
 8003d3a:	4b2f      	ldr	r3, [pc, #188]	; (8003df8 <vTaskSuspend+0xd0>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	e000      	b.n	8003d42 <vTaskSuspend+0x1a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3304      	adds	r3, #4
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f7ff f927 	bl	8002f9c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d004      	beq.n	8003d60 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3318      	adds	r3, #24
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff f91e 	bl	8002f9c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3304      	adds	r3, #4
 8003d64:	4619      	mov	r1, r3
 8003d66:	4825      	ldr	r0, [pc, #148]	; (8003dfc <vTaskSuspend+0xd4>)
 8003d68:	f7ff f8bd 	bl	8002ee6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d103      	bne.n	8003d80 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8003d80:	f001 fa30 	bl	80051e4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8003d84:	4b1e      	ldr	r3, [pc, #120]	; (8003e00 <vTaskSuspend+0xd8>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8003d8c:	f001 f9fc 	bl	8005188 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8003d90:	f000 fd02 	bl	8004798 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8003d94:	f001 fa26 	bl	80051e4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8003d98:	4b17      	ldr	r3, [pc, #92]	; (8003df8 <vTaskSuspend+0xd0>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d126      	bne.n	8003df0 <vTaskSuspend+0xc8>
		{
			if( xSchedulerRunning != pdFALSE )
 8003da2:	4b17      	ldr	r3, [pc, #92]	; (8003e00 <vTaskSuspend+0xd8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d016      	beq.n	8003dd8 <vTaskSuspend+0xb0>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8003daa:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <vTaskSuspend+0xdc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d009      	beq.n	8003dc6 <vTaskSuspend+0x9e>
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	60bb      	str	r3, [r7, #8]
 8003dc4:	e7fe      	b.n	8003dc4 <vTaskSuspend+0x9c>
				portYIELD_WITHIN_API();
 8003dc6:	4b10      	ldr	r3, [pc, #64]	; (8003e08 <vTaskSuspend+0xe0>)
 8003dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	f3bf 8f4f 	dsb	sy
 8003dd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dd6:	e00b      	b.n	8003df0 <vTaskSuspend+0xc8>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003dd8:	4b08      	ldr	r3, [pc, #32]	; (8003dfc <vTaskSuspend+0xd4>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <vTaskSuspend+0xe4>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d103      	bne.n	8003dec <vTaskSuspend+0xc4>
					pxCurrentTCB = NULL;
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <vTaskSuspend+0xd0>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	601a      	str	r2, [r3, #0]
	}
 8003dea:	e001      	b.n	8003df0 <vTaskSuspend+0xc8>
					vTaskSwitchContext();
 8003dec:	f000 fa94 	bl	8004318 <vTaskSwitchContext>
	}
 8003df0:	bf00      	nop
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200006ec 	.word	0x200006ec
 8003dfc:	20000bac 	.word	0x20000bac
 8003e00:	20000bcc 	.word	0x20000bcc
 8003e04:	20000be8 	.word	0x20000be8
 8003e08:	e000ed04 	.word	0xe000ed04
 8003e0c:	20000bc0 	.word	0x20000bc0

08003e10 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <prvTaskIsTaskSuspended+0x2a>
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e7fe      	b.n	8003e38 <prvTaskIsTaskSuspended+0x28>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	4a0f      	ldr	r2, [pc, #60]	; (8003e7c <prvTaskIsTaskSuspended+0x6c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <prvTaskIsTaskSuspended+0x38>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <prvTaskIsTaskSuspended+0x3a>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00f      	beq.n	8003e6e <prvTaskIsTaskSuspended+0x5e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e52:	4a0b      	ldr	r2, [pc, #44]	; (8003e80 <prvTaskIsTaskSuspended+0x70>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d00a      	beq.n	8003e6e <prvTaskIsTaskSuspended+0x5e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <prvTaskIsTaskSuspended+0x54>
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <prvTaskIsTaskSuspended+0x56>
 8003e64:	2300      	movs	r3, #0
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d001      	beq.n	8003e6e <prvTaskIsTaskSuspended+0x5e>
				{
					xReturn = pdTRUE;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e6e:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003e70:	4618      	mov	r0, r3
 8003e72:	371c      	adds	r7, #28
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000bac 	.word	0x20000bac
 8003e80:	20000b80 	.word	0x20000b80

08003e84 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <vTaskResume+0x26>
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	e7fe      	b.n	8003ea8 <vTaskResume+0x24>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d03a      	beq.n	8003f26 <vTaskResume+0xa2>
 8003eb0:	4b1f      	ldr	r3, [pc, #124]	; (8003f30 <vTaskResume+0xac>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d035      	beq.n	8003f26 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003eba:	f001 f965 	bl	8005188 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff ffa6 	bl	8003e10 <prvTaskIsTaskSuspended>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02b      	beq.n	8003f22 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7ff f864 	bl	8002f9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ed8:	4b16      	ldr	r3, [pc, #88]	; (8003f34 <vTaskResume+0xb0>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d903      	bls.n	8003ee8 <vTaskResume+0x64>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee4:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <vTaskResume+0xb0>)
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eec:	4613      	mov	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	4a10      	ldr	r2, [pc, #64]	; (8003f38 <vTaskResume+0xb4>)
 8003ef6:	441a      	add	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	3304      	adds	r3, #4
 8003efc:	4619      	mov	r1, r3
 8003efe:	4610      	mov	r0, r2
 8003f00:	f7fe fff1 	bl	8002ee6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f08:	4b09      	ldr	r3, [pc, #36]	; (8003f30 <vTaskResume+0xac>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d307      	bcc.n	8003f22 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8003f12:	4b0a      	ldr	r3, [pc, #40]	; (8003f3c <vTaskResume+0xb8>)
 8003f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8003f22:	f001 f95f 	bl	80051e4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f26:	bf00      	nop
 8003f28:	3710      	adds	r7, #16
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200006ec 	.word	0x200006ec
 8003f34:	20000bc8 	.word	0x20000bc8
 8003f38:	200006f0 	.word	0x200006f0
 8003f3c:	e000ed04 	.word	0xe000ed04

08003f40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08a      	sub	sp, #40	; 0x28
 8003f44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f4e:	463a      	mov	r2, r7
 8003f50:	1d39      	adds	r1, r7, #4
 8003f52:	f107 0308 	add.w	r3, r7, #8
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fe ff68 	bl	8002e2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f5c:	6839      	ldr	r1, [r7, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	9202      	str	r2, [sp, #8]
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	2300      	movs	r3, #0
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	460a      	mov	r2, r1
 8003f6e:	4920      	ldr	r1, [pc, #128]	; (8003ff0 <vTaskStartScheduler+0xb0>)
 8003f70:	4820      	ldr	r0, [pc, #128]	; (8003ff4 <vTaskStartScheduler+0xb4>)
 8003f72:	f7ff fd11 	bl	8003998 <xTaskCreateStatic>
 8003f76:	4602      	mov	r2, r0
 8003f78:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <vTaskStartScheduler+0xb8>)
 8003f7a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003f7c:	4b1e      	ldr	r3, [pc, #120]	; (8003ff8 <vTaskStartScheduler+0xb8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003f84:	2301      	movs	r3, #1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e001      	b.n	8003f8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d102      	bne.n	8003f9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003f94:	f000 fd02 	bl	800499c <xTimerCreateTimerTask>
 8003f98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d115      	bne.n	8003fcc <vTaskStartScheduler+0x8c>
 8003fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003fb2:	4b12      	ldr	r3, [pc, #72]	; (8003ffc <vTaskStartScheduler+0xbc>)
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003fba:	4b11      	ldr	r3, [pc, #68]	; (8004000 <vTaskStartScheduler+0xc0>)
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003fc0:	4b10      	ldr	r3, [pc, #64]	; (8004004 <vTaskStartScheduler+0xc4>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003fc6:	f001 f86f 	bl	80050a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003fca:	e00d      	b.n	8003fe8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d109      	bne.n	8003fe8 <vTaskStartScheduler+0xa8>
 8003fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd8:	f383 8811 	msr	BASEPRI, r3
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	f3bf 8f4f 	dsb	sy
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	e7fe      	b.n	8003fe6 <vTaskStartScheduler+0xa6>
}
 8003fe8:	bf00      	nop
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	080057b4 	.word	0x080057b4
 8003ff4:	08004635 	.word	0x08004635
 8003ff8:	20000be4 	.word	0x20000be4
 8003ffc:	20000be0 	.word	0x20000be0
 8004000:	20000bcc 	.word	0x20000bcc
 8004004:	20000bc4 	.word	0x20000bc4

08004008 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <vTaskSuspendAll+0x18>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	4a03      	ldr	r2, [pc, #12]	; (8004020 <vTaskSuspendAll+0x18>)
 8004014:	6013      	str	r3, [r2, #0]
}
 8004016:	bf00      	nop
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	20000be8 	.word	0x20000be8

08004024 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800402e:	2300      	movs	r3, #0
 8004030:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004032:	4b41      	ldr	r3, [pc, #260]	; (8004138 <xTaskResumeAll+0x114>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <xTaskResumeAll+0x2a>
 800403a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	603b      	str	r3, [r7, #0]
 800404c:	e7fe      	b.n	800404c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800404e:	f001 f89b 	bl	8005188 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004052:	4b39      	ldr	r3, [pc, #228]	; (8004138 <xTaskResumeAll+0x114>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3b01      	subs	r3, #1
 8004058:	4a37      	ldr	r2, [pc, #220]	; (8004138 <xTaskResumeAll+0x114>)
 800405a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800405c:	4b36      	ldr	r3, [pc, #216]	; (8004138 <xTaskResumeAll+0x114>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d162      	bne.n	800412a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004064:	4b35      	ldr	r3, [pc, #212]	; (800413c <xTaskResumeAll+0x118>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d05e      	beq.n	800412a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800406c:	e02f      	b.n	80040ce <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800406e:	4b34      	ldr	r3, [pc, #208]	; (8004140 <xTaskResumeAll+0x11c>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3318      	adds	r3, #24
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe ff8e 	bl	8002f9c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3304      	adds	r3, #4
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe ff89 	bl	8002f9c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800408e:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <xTaskResumeAll+0x120>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d903      	bls.n	800409e <xTaskResumeAll+0x7a>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409a:	4a2a      	ldr	r2, [pc, #168]	; (8004144 <xTaskResumeAll+0x120>)
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4a27      	ldr	r2, [pc, #156]	; (8004148 <xTaskResumeAll+0x124>)
 80040ac:	441a      	add	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	3304      	adds	r3, #4
 80040b2:	4619      	mov	r1, r3
 80040b4:	4610      	mov	r0, r2
 80040b6:	f7fe ff16 	bl	8002ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	4b23      	ldr	r3, [pc, #140]	; (800414c <xTaskResumeAll+0x128>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d302      	bcc.n	80040ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80040c8:	4b21      	ldr	r3, [pc, #132]	; (8004150 <xTaskResumeAll+0x12c>)
 80040ca:	2201      	movs	r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ce:	4b1c      	ldr	r3, [pc, #112]	; (8004140 <xTaskResumeAll+0x11c>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1cb      	bne.n	800406e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80040dc:	f000 fb5c 	bl	8004798 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80040e0:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <xTaskResumeAll+0x130>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d010      	beq.n	800410e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80040ec:	f000 f856 	bl	800419c <xTaskIncrementTick>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80040f6:	4b16      	ldr	r3, [pc, #88]	; (8004150 <xTaskResumeAll+0x12c>)
 80040f8:	2201      	movs	r2, #1
 80040fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3b01      	subs	r3, #1
 8004100:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1f1      	bne.n	80040ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004108:	4b12      	ldr	r3, [pc, #72]	; (8004154 <xTaskResumeAll+0x130>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800410e:	4b10      	ldr	r3, [pc, #64]	; (8004150 <xTaskResumeAll+0x12c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d009      	beq.n	800412a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004116:	2301      	movs	r3, #1
 8004118:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <xTaskResumeAll+0x134>)
 800411c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800412a:	f001 f85b 	bl	80051e4 <vPortExitCritical>

	return xAlreadyYielded;
 800412e:	68bb      	ldr	r3, [r7, #8]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3710      	adds	r7, #16
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}
 8004138:	20000be8 	.word	0x20000be8
 800413c:	20000bc0 	.word	0x20000bc0
 8004140:	20000b80 	.word	0x20000b80
 8004144:	20000bc8 	.word	0x20000bc8
 8004148:	200006f0 	.word	0x200006f0
 800414c:	200006ec 	.word	0x200006ec
 8004150:	20000bd4 	.word	0x20000bd4
 8004154:	20000bd0 	.word	0x20000bd0
 8004158:	e000ed04 	.word	0xe000ed04

0800415c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004162:	4b04      	ldr	r3, [pc, #16]	; (8004174 <xTaskGetTickCount+0x18>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004168:	687b      	ldr	r3, [r7, #4]
}
 800416a:	4618      	mov	r0, r3
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	bc80      	pop	{r7}
 8004172:	4770      	bx	lr
 8004174:	20000bc4 	.word	0x20000bc4

08004178 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800417e:	f001 f8bd 	bl	80052fc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8004186:	4b04      	ldr	r3, [pc, #16]	; (8004198 <xTaskGetTickCountFromISR+0x20>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800418c:	683b      	ldr	r3, [r7, #0]
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000bc4 	.word	0x20000bc4

0800419c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041a6:	4b51      	ldr	r3, [pc, #324]	; (80042ec <xTaskIncrementTick+0x150>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 808d 	bne.w	80042ca <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041b0:	4b4f      	ldr	r3, [pc, #316]	; (80042f0 <xTaskIncrementTick+0x154>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	3301      	adds	r3, #1
 80041b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041b8:	4a4d      	ldr	r2, [pc, #308]	; (80042f0 <xTaskIncrementTick+0x154>)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d11f      	bne.n	8004204 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80041c4:	4b4b      	ldr	r3, [pc, #300]	; (80042f4 <xTaskIncrementTick+0x158>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <xTaskIncrementTick+0x46>
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	e7fe      	b.n	80041e0 <xTaskIncrementTick+0x44>
 80041e2:	4b44      	ldr	r3, [pc, #272]	; (80042f4 <xTaskIncrementTick+0x158>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	60fb      	str	r3, [r7, #12]
 80041e8:	4b43      	ldr	r3, [pc, #268]	; (80042f8 <xTaskIncrementTick+0x15c>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a41      	ldr	r2, [pc, #260]	; (80042f4 <xTaskIncrementTick+0x158>)
 80041ee:	6013      	str	r3, [r2, #0]
 80041f0:	4a41      	ldr	r2, [pc, #260]	; (80042f8 <xTaskIncrementTick+0x15c>)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b41      	ldr	r3, [pc, #260]	; (80042fc <xTaskIncrementTick+0x160>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3301      	adds	r3, #1
 80041fc:	4a3f      	ldr	r2, [pc, #252]	; (80042fc <xTaskIncrementTick+0x160>)
 80041fe:	6013      	str	r3, [r2, #0]
 8004200:	f000 faca 	bl	8004798 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004204:	4b3e      	ldr	r3, [pc, #248]	; (8004300 <xTaskIncrementTick+0x164>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	429a      	cmp	r2, r3
 800420c:	d34e      	bcc.n	80042ac <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800420e:	4b39      	ldr	r3, [pc, #228]	; (80042f4 <xTaskIncrementTick+0x158>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d101      	bne.n	800421c <xTaskIncrementTick+0x80>
 8004218:	2301      	movs	r3, #1
 800421a:	e000      	b.n	800421e <xTaskIncrementTick+0x82>
 800421c:	2300      	movs	r3, #0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d004      	beq.n	800422c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004222:	4b37      	ldr	r3, [pc, #220]	; (8004300 <xTaskIncrementTick+0x164>)
 8004224:	f04f 32ff 	mov.w	r2, #4294967295
 8004228:	601a      	str	r2, [r3, #0]
					break;
 800422a:	e03f      	b.n	80042ac <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800422c:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <xTaskIncrementTick+0x158>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800423c:	693a      	ldr	r2, [r7, #16]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d203      	bcs.n	800424c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004244:	4a2e      	ldr	r2, [pc, #184]	; (8004300 <xTaskIncrementTick+0x164>)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6013      	str	r3, [r2, #0]
						break;
 800424a:	e02f      	b.n	80042ac <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	3304      	adds	r3, #4
 8004250:	4618      	mov	r0, r3
 8004252:	f7fe fea3 	bl	8002f9c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d004      	beq.n	8004268 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	3318      	adds	r3, #24
 8004262:	4618      	mov	r0, r3
 8004264:	f7fe fe9a 	bl	8002f9c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426c:	4b25      	ldr	r3, [pc, #148]	; (8004304 <xTaskIncrementTick+0x168>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d903      	bls.n	800427c <xTaskIncrementTick+0xe0>
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	4a22      	ldr	r2, [pc, #136]	; (8004304 <xTaskIncrementTick+0x168>)
 800427a:	6013      	str	r3, [r2, #0]
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	4613      	mov	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4413      	add	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4a1f      	ldr	r2, [pc, #124]	; (8004308 <xTaskIncrementTick+0x16c>)
 800428a:	441a      	add	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	3304      	adds	r3, #4
 8004290:	4619      	mov	r1, r3
 8004292:	4610      	mov	r0, r2
 8004294:	f7fe fe27 	bl	8002ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	4b1b      	ldr	r3, [pc, #108]	; (800430c <xTaskIncrementTick+0x170>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d3b3      	bcc.n	800420e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80042a6:	2301      	movs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042aa:	e7b0      	b.n	800420e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042ac:	4b17      	ldr	r3, [pc, #92]	; (800430c <xTaskIncrementTick+0x170>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	4915      	ldr	r1, [pc, #84]	; (8004308 <xTaskIncrementTick+0x16c>)
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d907      	bls.n	80042d4 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80042c4:	2301      	movs	r3, #1
 80042c6:	617b      	str	r3, [r7, #20]
 80042c8:	e004      	b.n	80042d4 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <xTaskIncrementTick+0x174>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3301      	adds	r3, #1
 80042d0:	4a0f      	ldr	r2, [pc, #60]	; (8004310 <xTaskIncrementTick+0x174>)
 80042d2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80042d4:	4b0f      	ldr	r3, [pc, #60]	; (8004314 <xTaskIncrementTick+0x178>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d001      	beq.n	80042e0 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80042dc:	2301      	movs	r3, #1
 80042de:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80042e0:	697b      	ldr	r3, [r7, #20]
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3718      	adds	r7, #24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000be8 	.word	0x20000be8
 80042f0:	20000bc4 	.word	0x20000bc4
 80042f4:	20000b78 	.word	0x20000b78
 80042f8:	20000b7c 	.word	0x20000b7c
 80042fc:	20000bd8 	.word	0x20000bd8
 8004300:	20000be0 	.word	0x20000be0
 8004304:	20000bc8 	.word	0x20000bc8
 8004308:	200006f0 	.word	0x200006f0
 800430c:	200006ec 	.word	0x200006ec
 8004310:	20000bd0 	.word	0x20000bd0
 8004314:	20000bd4 	.word	0x20000bd4

08004318 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800431e:	4b27      	ldr	r3, [pc, #156]	; (80043bc <vTaskSwitchContext+0xa4>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004326:	4b26      	ldr	r3, [pc, #152]	; (80043c0 <vTaskSwitchContext+0xa8>)
 8004328:	2201      	movs	r2, #1
 800432a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800432c:	e040      	b.n	80043b0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800432e:	4b24      	ldr	r3, [pc, #144]	; (80043c0 <vTaskSwitchContext+0xa8>)
 8004330:	2200      	movs	r2, #0
 8004332:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004334:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <vTaskSwitchContext+0xac>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	e00f      	b.n	800435c <vTaskSwitchContext+0x44>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <vTaskSwitchContext+0x3e>
 8004342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004346:	f383 8811 	msr	BASEPRI, r3
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	e7fe      	b.n	8004354 <vTaskSwitchContext+0x3c>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	3b01      	subs	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	491a      	ldr	r1, [pc, #104]	; (80043c8 <vTaskSwitchContext+0xb0>)
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0e5      	beq.n	800433c <vTaskSwitchContext+0x24>
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	4613      	mov	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	4a13      	ldr	r2, [pc, #76]	; (80043c8 <vTaskSwitchContext+0xb0>)
 800437c:	4413      	add	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	685a      	ldr	r2, [r3, #4]
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	605a      	str	r2, [r3, #4]
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	685a      	ldr	r2, [r3, #4]
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	3308      	adds	r3, #8
 8004392:	429a      	cmp	r2, r3
 8004394:	d104      	bne.n	80043a0 <vTaskSwitchContext+0x88>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	4a09      	ldr	r2, [pc, #36]	; (80043cc <vTaskSwitchContext+0xb4>)
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4a06      	ldr	r2, [pc, #24]	; (80043c4 <vTaskSwitchContext+0xac>)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6013      	str	r3, [r2, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	20000be8 	.word	0x20000be8
 80043c0:	20000bd4 	.word	0x20000bd4
 80043c4:	20000bc8 	.word	0x20000bc8
 80043c8:	200006f0 	.word	0x200006f0
 80043cc:	200006ec 	.word	0x200006ec

080043d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d109      	bne.n	80043f4 <vTaskPlaceOnEventList+0x24>
 80043e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	e7fe      	b.n	80043f2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80043f4:	4b07      	ldr	r3, [pc, #28]	; (8004414 <vTaskPlaceOnEventList+0x44>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3318      	adds	r3, #24
 80043fa:	4619      	mov	r1, r3
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fe fd95 	bl	8002f2c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004402:	2101      	movs	r1, #1
 8004404:	6838      	ldr	r0, [r7, #0]
 8004406:	f000 fa75 	bl	80048f4 <prvAddCurrentTaskToDelayedList>
}
 800440a:	bf00      	nop
 800440c:	3710      	adds	r7, #16
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	200006ec 	.word	0x200006ec

08004418 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d109      	bne.n	800443e <vTaskPlaceOnEventListRestricted+0x26>
 800442a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	e7fe      	b.n	800443c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800443e:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <vTaskPlaceOnEventListRestricted+0x50>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3318      	adds	r3, #24
 8004444:	4619      	mov	r1, r3
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f7fe fd4d 	bl	8002ee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d002      	beq.n	8004458 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	68b8      	ldr	r0, [r7, #8]
 800445c:	f000 fa4a 	bl	80048f4 <prvAddCurrentTaskToDelayedList>
	}
 8004460:	bf00      	nop
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}
 8004468:	200006ec 	.word	0x200006ec

0800446c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <xTaskRemoveFromEventList+0x2a>
 8004482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004486:	f383 8811 	msr	BASEPRI, r3
 800448a:	f3bf 8f6f 	isb	sy
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e7fe      	b.n	8004494 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	3318      	adds	r3, #24
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fd7e 	bl	8002f9c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044a0:	4b1d      	ldr	r3, [pc, #116]	; (8004518 <xTaskRemoveFromEventList+0xac>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d11d      	bne.n	80044e4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	3304      	adds	r3, #4
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe fd75 	bl	8002f9c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b6:	4b19      	ldr	r3, [pc, #100]	; (800451c <xTaskRemoveFromEventList+0xb0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d903      	bls.n	80044c6 <xTaskRemoveFromEventList+0x5a>
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c2:	4a16      	ldr	r2, [pc, #88]	; (800451c <xTaskRemoveFromEventList+0xb0>)
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	4613      	mov	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4a13      	ldr	r2, [pc, #76]	; (8004520 <xTaskRemoveFromEventList+0xb4>)
 80044d4:	441a      	add	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	3304      	adds	r3, #4
 80044da:	4619      	mov	r1, r3
 80044dc:	4610      	mov	r0, r2
 80044de:	f7fe fd02 	bl	8002ee6 <vListInsertEnd>
 80044e2:	e005      	b.n	80044f0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	3318      	adds	r3, #24
 80044e8:	4619      	mov	r1, r3
 80044ea:	480e      	ldr	r0, [pc, #56]	; (8004524 <xTaskRemoveFromEventList+0xb8>)
 80044ec:	f7fe fcfb 	bl	8002ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	4b0c      	ldr	r3, [pc, #48]	; (8004528 <xTaskRemoveFromEventList+0xbc>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d905      	bls.n	800450a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80044fe:	2301      	movs	r3, #1
 8004500:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004502:	4b0a      	ldr	r3, [pc, #40]	; (800452c <xTaskRemoveFromEventList+0xc0>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	e001      	b.n	800450e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800450e:	697b      	ldr	r3, [r7, #20]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000be8 	.word	0x20000be8
 800451c:	20000bc8 	.word	0x20000bc8
 8004520:	200006f0 	.word	0x200006f0
 8004524:	20000b80 	.word	0x20000b80
 8004528:	200006ec 	.word	0x200006ec
 800452c:	20000bd4 	.word	0x20000bd4

08004530 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004538:	4b06      	ldr	r3, [pc, #24]	; (8004554 <vTaskInternalSetTimeOutState+0x24>)
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004540:	4b05      	ldr	r3, [pc, #20]	; (8004558 <vTaskInternalSetTimeOutState+0x28>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	605a      	str	r2, [r3, #4]
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	20000bd8 	.word	0x20000bd8
 8004558:	20000bc4 	.word	0x20000bc4

0800455c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <xTaskCheckForTimeOut+0x24>
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	e7fe      	b.n	800457e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d109      	bne.n	800459a <xTaskCheckForTimeOut+0x3e>
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e7fe      	b.n	8004598 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800459a:	f000 fdf5 	bl	8005188 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800459e:	4b1d      	ldr	r3, [pc, #116]	; (8004614 <xTaskCheckForTimeOut+0xb8>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d102      	bne.n	80045be <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	e023      	b.n	8004606 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	4b15      	ldr	r3, [pc, #84]	; (8004618 <xTaskCheckForTimeOut+0xbc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d007      	beq.n	80045da <xTaskCheckForTimeOut+0x7e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d302      	bcc.n	80045da <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	61fb      	str	r3, [r7, #28]
 80045d8:	e015      	b.n	8004606 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d20b      	bcs.n	80045fc <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff ff9d 	bl	8004530 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e004      	b.n	8004606 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004602:	2301      	movs	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004606:	f000 fded 	bl	80051e4 <vPortExitCritical>

	return xReturn;
 800460a:	69fb      	ldr	r3, [r7, #28]
}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	20000bc4 	.word	0x20000bc4
 8004618:	20000bd8 	.word	0x20000bd8

0800461c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <vTaskMissedYield+0x14>)
 8004622:	2201      	movs	r2, #1
 8004624:	601a      	str	r2, [r3, #0]
}
 8004626:	bf00      	nop
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000bd4 	.word	0x20000bd4

08004634 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800463c:	f000 f852 	bl	80046e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004640:	4b06      	ldr	r3, [pc, #24]	; (800465c <prvIdleTask+0x28>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d9f9      	bls.n	800463c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <prvIdleTask+0x2c>)
 800464a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004658:	e7f0      	b.n	800463c <prvIdleTask+0x8>
 800465a:	bf00      	nop
 800465c:	200006f0 	.word	0x200006f0
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800466a:	2300      	movs	r3, #0
 800466c:	607b      	str	r3, [r7, #4]
 800466e:	e00c      	b.n	800468a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <prvInitialiseTaskLists+0x60>)
 800467c:	4413      	add	r3, r2
 800467e:	4618      	mov	r0, r3
 8004680:	f7fe fc06 	bl	8002e90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3301      	adds	r3, #1
 8004688:	607b      	str	r3, [r7, #4]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b37      	cmp	r3, #55	; 0x37
 800468e:	d9ef      	bls.n	8004670 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004690:	480d      	ldr	r0, [pc, #52]	; (80046c8 <prvInitialiseTaskLists+0x64>)
 8004692:	f7fe fbfd 	bl	8002e90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004696:	480d      	ldr	r0, [pc, #52]	; (80046cc <prvInitialiseTaskLists+0x68>)
 8004698:	f7fe fbfa 	bl	8002e90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800469c:	480c      	ldr	r0, [pc, #48]	; (80046d0 <prvInitialiseTaskLists+0x6c>)
 800469e:	f7fe fbf7 	bl	8002e90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046a2:	480c      	ldr	r0, [pc, #48]	; (80046d4 <prvInitialiseTaskLists+0x70>)
 80046a4:	f7fe fbf4 	bl	8002e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046a8:	480b      	ldr	r0, [pc, #44]	; (80046d8 <prvInitialiseTaskLists+0x74>)
 80046aa:	f7fe fbf1 	bl	8002e90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046ae:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <prvInitialiseTaskLists+0x78>)
 80046b0:	4a05      	ldr	r2, [pc, #20]	; (80046c8 <prvInitialiseTaskLists+0x64>)
 80046b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046b4:	4b0a      	ldr	r3, [pc, #40]	; (80046e0 <prvInitialiseTaskLists+0x7c>)
 80046b6:	4a05      	ldr	r2, [pc, #20]	; (80046cc <prvInitialiseTaskLists+0x68>)
 80046b8:	601a      	str	r2, [r3, #0]
}
 80046ba:	bf00      	nop
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	200006f0 	.word	0x200006f0
 80046c8:	20000b50 	.word	0x20000b50
 80046cc:	20000b64 	.word	0x20000b64
 80046d0:	20000b80 	.word	0x20000b80
 80046d4:	20000b94 	.word	0x20000b94
 80046d8:	20000bac 	.word	0x20000bac
 80046dc:	20000b78 	.word	0x20000b78
 80046e0:	20000b7c 	.word	0x20000b7c

080046e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80046ea:	e019      	b.n	8004720 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80046ec:	f000 fd4c 	bl	8005188 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80046f0:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <prvCheckTasksWaitingTermination+0x4c>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3304      	adds	r3, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fe fc4d 	bl	8002f9c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <prvCheckTasksWaitingTermination+0x50>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	3b01      	subs	r3, #1
 8004708:	4a0a      	ldr	r2, [pc, #40]	; (8004734 <prvCheckTasksWaitingTermination+0x50>)
 800470a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <prvCheckTasksWaitingTermination+0x54>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3b01      	subs	r3, #1
 8004712:	4a09      	ldr	r2, [pc, #36]	; (8004738 <prvCheckTasksWaitingTermination+0x54>)
 8004714:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004716:	f000 fd65 	bl	80051e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f80e 	bl	800473c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004720:	4b05      	ldr	r3, [pc, #20]	; (8004738 <prvCheckTasksWaitingTermination+0x54>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d1e1      	bne.n	80046ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004728:	bf00      	nop
 800472a:	3708      	adds	r7, #8
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000b94 	.word	0x20000b94
 8004734:	20000bc0 	.word	0x20000bc0
 8004738:	20000ba8 	.word	0x20000ba8

0800473c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800474a:	2b00      	cmp	r3, #0
 800474c:	d108      	bne.n	8004760 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fed0 	bl	80054f8 <vPortFree>
				vPortFree( pxTCB );
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 fecd 	bl	80054f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800475e:	e017      	b.n	8004790 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004766:	2b01      	cmp	r3, #1
 8004768:	d103      	bne.n	8004772 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 fec4 	bl	80054f8 <vPortFree>
	}
 8004770:	e00e      	b.n	8004790 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004778:	2b02      	cmp	r3, #2
 800477a:	d009      	beq.n	8004790 <prvDeleteTCB+0x54>
 800477c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004780:	f383 8811 	msr	BASEPRI, r3
 8004784:	f3bf 8f6f 	isb	sy
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e7fe      	b.n	800478e <prvDeleteTCB+0x52>
	}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <prvResetNextTaskUnblockTime+0x40>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <prvResetNextTaskUnblockTime+0x14>
 80047a8:	2301      	movs	r3, #1
 80047aa:	e000      	b.n	80047ae <prvResetNextTaskUnblockTime+0x16>
 80047ac:	2300      	movs	r3, #0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d004      	beq.n	80047bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <prvResetNextTaskUnblockTime+0x44>)
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047ba:	e008      	b.n	80047ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80047bc:	4b06      	ldr	r3, [pc, #24]	; (80047d8 <prvResetNextTaskUnblockTime+0x40>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	4a04      	ldr	r2, [pc, #16]	; (80047dc <prvResetNextTaskUnblockTime+0x44>)
 80047cc:	6013      	str	r3, [r2, #0]
}
 80047ce:	bf00      	nop
 80047d0:	370c      	adds	r7, #12
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bc80      	pop	{r7}
 80047d6:	4770      	bx	lr
 80047d8:	20000b78 	.word	0x20000b78
 80047dc:	20000be0 	.word	0x20000be0

080047e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80047e6:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <xTaskGetSchedulerState+0x34>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80047ee:	2301      	movs	r3, #1
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	e008      	b.n	8004806 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047f4:	4b08      	ldr	r3, [pc, #32]	; (8004818 <xTaskGetSchedulerState+0x38>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80047fc:	2302      	movs	r3, #2
 80047fe:	607b      	str	r3, [r7, #4]
 8004800:	e001      	b.n	8004806 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004802:	2300      	movs	r3, #0
 8004804:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004806:	687b      	ldr	r3, [r7, #4]
	}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	bc80      	pop	{r7}
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000bcc 	.word	0x20000bcc
 8004818:	20000be8 	.word	0x20000be8

0800481c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d054      	beq.n	80048dc <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004832:	4b2d      	ldr	r3, [pc, #180]	; (80048e8 <xTaskPriorityDisinherit+0xcc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	429a      	cmp	r2, r3
 800483a:	d009      	beq.n	8004850 <xTaskPriorityDisinherit+0x34>
 800483c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004840:	f383 8811 	msr	BASEPRI, r3
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	f3bf 8f4f 	dsb	sy
 800484c:	60fb      	str	r3, [r7, #12]
 800484e:	e7fe      	b.n	800484e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <xTaskPriorityDisinherit+0x50>
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	e7fe      	b.n	800486a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004870:	1e5a      	subs	r2, r3, #1
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800487e:	429a      	cmp	r2, r3
 8004880:	d02c      	beq.n	80048dc <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004886:	2b00      	cmp	r3, #0
 8004888:	d128      	bne.n	80048dc <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	3304      	adds	r3, #4
 800488e:	4618      	mov	r0, r3
 8004890:	f7fe fb84 	bl	8002f9c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <xTaskPriorityDisinherit+0xd0>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d903      	bls.n	80048bc <xTaskPriorityDisinherit+0xa0>
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b8:	4a0c      	ldr	r2, [pc, #48]	; (80048ec <xTaskPriorityDisinherit+0xd0>)
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4a09      	ldr	r2, [pc, #36]	; (80048f0 <xTaskPriorityDisinherit+0xd4>)
 80048ca:	441a      	add	r2, r3
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	3304      	adds	r3, #4
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7fe fb07 	bl	8002ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80048d8:	2301      	movs	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80048dc:	697b      	ldr	r3, [r7, #20]
	}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200006ec 	.word	0x200006ec
 80048ec:	20000bc8 	.word	0x20000bc8
 80048f0:	200006f0 	.word	0x200006f0

080048f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048fe:	4b21      	ldr	r3, [pc, #132]	; (8004984 <prvAddCurrentTaskToDelayedList+0x90>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004904:	4b20      	ldr	r3, [pc, #128]	; (8004988 <prvAddCurrentTaskToDelayedList+0x94>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fb46 	bl	8002f9c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004916:	d10a      	bne.n	800492e <prvAddCurrentTaskToDelayedList+0x3a>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <prvAddCurrentTaskToDelayedList+0x94>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3304      	adds	r3, #4
 8004924:	4619      	mov	r1, r3
 8004926:	4819      	ldr	r0, [pc, #100]	; (800498c <prvAddCurrentTaskToDelayedList+0x98>)
 8004928:	f7fe fadd 	bl	8002ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800492c:	e026      	b.n	800497c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4413      	add	r3, r2
 8004934:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004936:	4b14      	ldr	r3, [pc, #80]	; (8004988 <prvAddCurrentTaskToDelayedList+0x94>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	429a      	cmp	r2, r3
 8004944:	d209      	bcs.n	800495a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004946:	4b12      	ldr	r3, [pc, #72]	; (8004990 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <prvAddCurrentTaskToDelayedList+0x94>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	3304      	adds	r3, #4
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f7fe faea 	bl	8002f2c <vListInsert>
}
 8004958:	e010      	b.n	800497c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800495a:	4b0e      	ldr	r3, [pc, #56]	; (8004994 <prvAddCurrentTaskToDelayedList+0xa0>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <prvAddCurrentTaskToDelayedList+0x94>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f7fe fae0 	bl	8002f2c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <prvAddCurrentTaskToDelayedList+0xa4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	d202      	bcs.n	800497c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004976:	4a08      	ldr	r2, [pc, #32]	; (8004998 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	6013      	str	r3, [r2, #0]
}
 800497c:	bf00      	nop
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	20000bc4 	.word	0x20000bc4
 8004988:	200006ec 	.word	0x200006ec
 800498c:	20000bac 	.word	0x20000bac
 8004990:	20000b7c 	.word	0x20000b7c
 8004994:	20000b78 	.word	0x20000b78
 8004998:	20000be0 	.word	0x20000be0

0800499c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b08a      	sub	sp, #40	; 0x28
 80049a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049a6:	f000 fac3 	bl	8004f30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049aa:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <xTimerCreateTimerTask+0x80>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d021      	beq.n	80049f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049b2:	2300      	movs	r3, #0
 80049b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049ba:	1d3a      	adds	r2, r7, #4
 80049bc:	f107 0108 	add.w	r1, r7, #8
 80049c0:	f107 030c 	add.w	r3, r7, #12
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fe fa49 	bl	8002e5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80049ca:	6879      	ldr	r1, [r7, #4]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	9202      	str	r2, [sp, #8]
 80049d2:	9301      	str	r3, [sp, #4]
 80049d4:	2302      	movs	r3, #2
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2300      	movs	r3, #0
 80049da:	460a      	mov	r2, r1
 80049dc:	4910      	ldr	r1, [pc, #64]	; (8004a20 <xTimerCreateTimerTask+0x84>)
 80049de:	4811      	ldr	r0, [pc, #68]	; (8004a24 <xTimerCreateTimerTask+0x88>)
 80049e0:	f7fe ffda 	bl	8003998 <xTaskCreateStatic>
 80049e4:	4602      	mov	r2, r0
 80049e6:	4b10      	ldr	r3, [pc, #64]	; (8004a28 <xTimerCreateTimerTask+0x8c>)
 80049e8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80049ea:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <xTimerCreateTimerTask+0x8c>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d001      	beq.n	80049f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80049f2:	2301      	movs	r3, #1
 80049f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d109      	bne.n	8004a10 <xTimerCreateTimerTask+0x74>
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	e7fe      	b.n	8004a0e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004a10:	697b      	ldr	r3, [r7, #20]
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	20000c1c 	.word	0x20000c1c
 8004a20:	080057bc 	.word	0x080057bc
 8004a24:	08004b45 	.word	0x08004b45
 8004a28:	20000c20 	.word	0x20000c20

08004a2c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08a      	sub	sp, #40	; 0x28
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d109      	bne.n	8004a58 <xTimerGenericCommand+0x2c>
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	623b      	str	r3, [r7, #32]
 8004a56:	e7fe      	b.n	8004a56 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a58:	4b19      	ldr	r3, [pc, #100]	; (8004ac0 <xTimerGenericCommand+0x94>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d02a      	beq.n	8004ab6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b05      	cmp	r3, #5
 8004a70:	dc18      	bgt.n	8004aa4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004a72:	f7ff feb5 	bl	80047e0 <xTaskGetSchedulerState>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d109      	bne.n	8004a90 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004a7c:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <xTimerGenericCommand+0x94>)
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	f107 0110 	add.w	r1, r7, #16
 8004a84:	2300      	movs	r3, #0
 8004a86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a88:	f7fe fbb0 	bl	80031ec <xQueueGenericSend>
 8004a8c:	6278      	str	r0, [r7, #36]	; 0x24
 8004a8e:	e012      	b.n	8004ab6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004a90:	4b0b      	ldr	r3, [pc, #44]	; (8004ac0 <xTimerGenericCommand+0x94>)
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	f107 0110 	add.w	r1, r7, #16
 8004a98:	2300      	movs	r3, #0
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f7fe fba6 	bl	80031ec <xQueueGenericSend>
 8004aa0:	6278      	str	r0, [r7, #36]	; 0x24
 8004aa2:	e008      	b.n	8004ab6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <xTimerGenericCommand+0x94>)
 8004aa6:	6818      	ldr	r0, [r3, #0]
 8004aa8:	f107 0110 	add.w	r1, r7, #16
 8004aac:	2300      	movs	r3, #0
 8004aae:	683a      	ldr	r2, [r7, #0]
 8004ab0:	f7fe fc96 	bl	80033e0 <xQueueGenericSendFromISR>
 8004ab4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	; 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000c1c 	.word	0x20000c1c

08004ac4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <prvProcessExpiredTimer+0x7c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	3304      	adds	r3, #4
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fe fa5d 	bl	8002f9c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d121      	bne.n	8004b2e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	18d1      	adds	r1, r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	6978      	ldr	r0, [r7, #20]
 8004af8:	f000 f8c8 	bl	8004c8c <prvInsertTimerInActiveList>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d015      	beq.n	8004b2e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b02:	2300      	movs	r3, #0
 8004b04:	9300      	str	r3, [sp, #0]
 8004b06:	2300      	movs	r3, #0
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	2100      	movs	r1, #0
 8004b0c:	6978      	ldr	r0, [r7, #20]
 8004b0e:	f7ff ff8d 	bl	8004a2c <xTimerGenericCommand>
 8004b12:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d109      	bne.n	8004b2e <prvProcessExpiredTimer+0x6a>
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	e7fe      	b.n	8004b2c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	6978      	ldr	r0, [r7, #20]
 8004b34:	4798      	blx	r3
}
 8004b36:	bf00      	nop
 8004b38:	3718      	adds	r7, #24
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000c14 	.word	0x20000c14

08004b44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b4c:	f107 0308 	add.w	r3, r7, #8
 8004b50:	4618      	mov	r0, r3
 8004b52:	f000 f857 	bl	8004c04 <prvGetNextExpireTime>
 8004b56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 f803 	bl	8004b68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004b62:	f000 f8d5 	bl	8004d10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b66:	e7f1      	b.n	8004b4c <prvTimerTask+0x8>

08004b68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004b72:	f7ff fa49 	bl	8004008 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b76:	f107 0308 	add.w	r3, r7, #8
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 f866 	bl	8004c4c <prvSampleTimeNow>
 8004b80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d130      	bne.n	8004bea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <prvProcessTimerOrBlockTask+0x3c>
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d806      	bhi.n	8004ba4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004b96:	f7ff fa45 	bl	8004024 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004b9a:	68f9      	ldr	r1, [r7, #12]
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff91 	bl	8004ac4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ba2:	e024      	b.n	8004bee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <prvProcessTimerOrBlockTask+0x90>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	bf0c      	ite	eq
 8004bb4:	2301      	moveq	r3, #1
 8004bb6:	2300      	movne	r3, #0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004bbc:	4b0f      	ldr	r3, [pc, #60]	; (8004bfc <prvProcessTimerOrBlockTask+0x94>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f7fe feb1 	bl	8003930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004bce:	f7ff fa29 	bl	8004024 <xTaskResumeAll>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <prvProcessTimerOrBlockTask+0x98>)
 8004bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bde:	601a      	str	r2, [r3, #0]
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	f3bf 8f6f 	isb	sy
}
 8004be8:	e001      	b.n	8004bee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004bea:	f7ff fa1b 	bl	8004024 <xTaskResumeAll>
}
 8004bee:	bf00      	nop
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000c18 	.word	0x20000c18
 8004bfc:	20000c1c 	.word	0x20000c1c
 8004c00:	e000ed04 	.word	0xe000ed04

08004c04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c04:	b480      	push	{r7}
 8004c06:	b085      	sub	sp, #20
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c0c:	4b0e      	ldr	r3, [pc, #56]	; (8004c48 <prvGetNextExpireTime+0x44>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf0c      	ite	eq
 8004c16:	2301      	moveq	r3, #1
 8004c18:	2300      	movne	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d105      	bne.n	8004c36 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c2a:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <prvGetNextExpireTime+0x44>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	e001      	b.n	8004c3a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3714      	adds	r7, #20
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	20000c14 	.word	0x20000c14

08004c4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004c54:	f7ff fa82 	bl	800415c <xTaskGetTickCount>
 8004c58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <prvSampleTimeNow+0x3c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d205      	bcs.n	8004c70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004c64:	f000 f904 	bl	8004e70 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	e002      	b.n	8004c76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004c76:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <prvSampleTimeNow+0x3c>)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20000c24 	.word	0x20000c24

08004c8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
 8004c98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d812      	bhi.n	8004cd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	1ad2      	subs	r2, r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d302      	bcc.n	8004cc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	617b      	str	r3, [r7, #20]
 8004cc4:	e01b      	b.n	8004cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004cc6:	4b10      	ldr	r3, [pc, #64]	; (8004d08 <prvInsertTimerInActiveList+0x7c>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	4619      	mov	r1, r3
 8004cd0:	4610      	mov	r0, r2
 8004cd2:	f7fe f92b 	bl	8002f2c <vListInsert>
 8004cd6:	e012      	b.n	8004cfe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d206      	bcs.n	8004cee <prvInsertTimerInActiveList+0x62>
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d302      	bcc.n	8004cee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
 8004cec:	e007      	b.n	8004cfe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004cee:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <prvInsertTimerInActiveList+0x80>)
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3304      	adds	r3, #4
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	f7fe f917 	bl	8002f2c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004cfe:	697b      	ldr	r3, [r7, #20]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	20000c18 	.word	0x20000c18
 8004d0c:	20000c14 	.word	0x20000c14

08004d10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08e      	sub	sp, #56	; 0x38
 8004d14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d16:	e099      	b.n	8004e4c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	da17      	bge.n	8004d4e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d1e:	1d3b      	adds	r3, r7, #4
 8004d20:	3304      	adds	r3, #4
 8004d22:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d109      	bne.n	8004d3e <prvProcessReceivedCommands+0x2e>
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	61fb      	str	r3, [r7, #28]
 8004d3c:	e7fe      	b.n	8004d3c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d44:	6850      	ldr	r0, [r2, #4]
 8004d46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d48:	6892      	ldr	r2, [r2, #8]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	db7a      	blt.n	8004e4a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	3304      	adds	r3, #4
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe f919 	bl	8002f9c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f7ff ff6d 	bl	8004c4c <prvSampleTimeNow>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b09      	cmp	r3, #9
 8004d78:	d868      	bhi.n	8004e4c <prvProcessReceivedCommands+0x13c>
 8004d7a:	a201      	add	r2, pc, #4	; (adr r2, 8004d80 <prvProcessReceivedCommands+0x70>)
 8004d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d80:	08004da9 	.word	0x08004da9
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004da9 	.word	0x08004da9
 8004d8c:	08004e4d 	.word	0x08004e4d
 8004d90:	08004e03 	.word	0x08004e03
 8004d94:	08004e39 	.word	0x08004e39
 8004d98:	08004da9 	.word	0x08004da9
 8004d9c:	08004da9 	.word	0x08004da9
 8004da0:	08004e4d 	.word	0x08004e4d
 8004da4:	08004e03 	.word	0x08004e03
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004da8:	68ba      	ldr	r2, [r7, #8]
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	18d1      	adds	r1, r2, r3
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004db6:	f7ff ff69 	bl	8004c8c <prvInsertTimerInActiveList>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d045      	beq.n	8004e4c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dca:	69db      	ldr	r3, [r3, #28]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d13d      	bne.n	8004e4c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	441a      	add	r2, r3
 8004dd8:	2300      	movs	r3, #0
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2100      	movs	r1, #0
 8004de0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de2:	f7ff fe23 	bl	8004a2c <xTimerGenericCommand>
 8004de6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004de8:	6a3b      	ldr	r3, [r7, #32]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d12e      	bne.n	8004e4c <prvProcessReceivedCommands+0x13c>
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	e7fe      	b.n	8004e00 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d109      	bne.n	8004e24 <prvProcessReceivedCommands+0x114>
 8004e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e14:	f383 8811 	msr	BASEPRI, r3
 8004e18:	f3bf 8f6f 	isb	sy
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	617b      	str	r3, [r7, #20]
 8004e22:	e7fe      	b.n	8004e22 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e26:	699a      	ldr	r2, [r3, #24]
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	18d1      	adds	r1, r2, r3
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e32:	f7ff ff2b 	bl	8004c8c <prvInsertTimerInActiveList>
					break;
 8004e36:	e009      	b.n	8004e4c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e44:	f000 fb58 	bl	80054f8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004e48:	e000      	b.n	8004e4c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004e4a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004e4c:	4b07      	ldr	r3, [pc, #28]	; (8004e6c <prvProcessReceivedCommands+0x15c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	1d39      	adds	r1, r7, #4
 8004e52:	2200      	movs	r2, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7fe fb57 	bl	8003508 <xQueueReceive>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f47f af5b 	bne.w	8004d18 <prvProcessReceivedCommands+0x8>
	}
}
 8004e62:	bf00      	nop
 8004e64:	3730      	adds	r7, #48	; 0x30
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000c1c 	.word	0x20000c1c

08004e70 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b088      	sub	sp, #32
 8004e74:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e76:	e044      	b.n	8004f02 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e78:	4b2b      	ldr	r3, [pc, #172]	; (8004f28 <prvSwitchTimerLists+0xb8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <prvSwitchTimerLists+0xb8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7fe f883 	bl	8002f9c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d12d      	bne.n	8004f02 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4413      	add	r3, r2
 8004eae:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004eb0:	68ba      	ldr	r2, [r7, #8]
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d90e      	bls.n	8004ed6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	68ba      	ldr	r2, [r7, #8]
 8004ebc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ec4:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <prvSwitchTimerLists+0xb8>)
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3304      	adds	r3, #4
 8004ecc:	4619      	mov	r1, r3
 8004ece:	4610      	mov	r0, r2
 8004ed0:	f7fe f82c 	bl	8002f2c <vListInsert>
 8004ed4:	e015      	b.n	8004f02 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9300      	str	r3, [sp, #0]
 8004eda:	2300      	movs	r3, #0
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	2100      	movs	r1, #0
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f7ff fda3 	bl	8004a2c <xTimerGenericCommand>
 8004ee6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d109      	bne.n	8004f02 <prvSwitchTimerLists+0x92>
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	603b      	str	r3, [r7, #0]
 8004f00:	e7fe      	b.n	8004f00 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f02:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <prvSwitchTimerLists+0xb8>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1b5      	bne.n	8004e78 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004f0c:	4b06      	ldr	r3, [pc, #24]	; (8004f28 <prvSwitchTimerLists+0xb8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004f12:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <prvSwitchTimerLists+0xbc>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a04      	ldr	r2, [pc, #16]	; (8004f28 <prvSwitchTimerLists+0xb8>)
 8004f18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <prvSwitchTimerLists+0xbc>)
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	6013      	str	r3, [r2, #0]
}
 8004f20:	bf00      	nop
 8004f22:	3718      	adds	r7, #24
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	20000c14 	.word	0x20000c14
 8004f2c:	20000c18 	.word	0x20000c18

08004f30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004f36:	f000 f927 	bl	8005188 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004f3a:	4b15      	ldr	r3, [pc, #84]	; (8004f90 <prvCheckForValidListAndQueue+0x60>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d120      	bne.n	8004f84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004f42:	4814      	ldr	r0, [pc, #80]	; (8004f94 <prvCheckForValidListAndQueue+0x64>)
 8004f44:	f7fd ffa4 	bl	8002e90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004f48:	4813      	ldr	r0, [pc, #76]	; (8004f98 <prvCheckForValidListAndQueue+0x68>)
 8004f4a:	f7fd ffa1 	bl	8002e90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004f4e:	4b13      	ldr	r3, [pc, #76]	; (8004f9c <prvCheckForValidListAndQueue+0x6c>)
 8004f50:	4a10      	ldr	r2, [pc, #64]	; (8004f94 <prvCheckForValidListAndQueue+0x64>)
 8004f52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004f54:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <prvCheckForValidListAndQueue+0x70>)
 8004f56:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <prvCheckForValidListAndQueue+0x68>)
 8004f58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	9300      	str	r3, [sp, #0]
 8004f5e:	4b11      	ldr	r3, [pc, #68]	; (8004fa4 <prvCheckForValidListAndQueue+0x74>)
 8004f60:	4a11      	ldr	r2, [pc, #68]	; (8004fa8 <prvCheckForValidListAndQueue+0x78>)
 8004f62:	2110      	movs	r1, #16
 8004f64:	200a      	movs	r0, #10
 8004f66:	f7fe f8ab 	bl	80030c0 <xQueueGenericCreateStatic>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <prvCheckForValidListAndQueue+0x60>)
 8004f6e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004f70:	4b07      	ldr	r3, [pc, #28]	; (8004f90 <prvCheckForValidListAndQueue+0x60>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004f78:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <prvCheckForValidListAndQueue+0x60>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	490b      	ldr	r1, [pc, #44]	; (8004fac <prvCheckForValidListAndQueue+0x7c>)
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7fe fcae 	bl	80038e0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f84:	f000 f92e 	bl	80051e4 <vPortExitCritical>
}
 8004f88:	bf00      	nop
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	20000c1c 	.word	0x20000c1c
 8004f94:	20000bec 	.word	0x20000bec
 8004f98:	20000c00 	.word	0x20000c00
 8004f9c:	20000c14 	.word	0x20000c14
 8004fa0:	20000c18 	.word	0x20000c18
 8004fa4:	20000cc8 	.word	0x20000cc8
 8004fa8:	20000c28 	.word	0x20000c28
 8004fac:	080057c4 	.word	0x080057c4

08004fb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3b04      	subs	r3, #4
 8004fc0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004fc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3b04      	subs	r3, #4
 8004fce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f023 0201 	bic.w	r2, r3, #1
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	3b04      	subs	r3, #4
 8004fde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fe0:	4a08      	ldr	r2, [pc, #32]	; (8005004 <pxPortInitialiseStack+0x54>)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3b14      	subs	r3, #20
 8004fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3b20      	subs	r3, #32
 8004ff6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bc80      	pop	{r7}
 8005002:	4770      	bx	lr
 8005004:	08005009 	.word	0x08005009

08005008 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800500e:	2300      	movs	r3, #0
 8005010:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005012:	4b10      	ldr	r3, [pc, #64]	; (8005054 <prvTaskExitError+0x4c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d009      	beq.n	8005030 <prvTaskExitError+0x28>
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	60fb      	str	r3, [r7, #12]
 800502e:	e7fe      	b.n	800502e <prvTaskExitError+0x26>
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	f383 8811 	msr	BASEPRI, r3
 8005038:	f3bf 8f6f 	isb	sy
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005042:	bf00      	nop
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0fc      	beq.n	8005044 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	2000000c 	.word	0x2000000c
	...

08005060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005060:	4b07      	ldr	r3, [pc, #28]	; (8005080 <pxCurrentTCBConst2>)
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	6808      	ldr	r0, [r1, #0]
 8005066:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800506a:	f380 8809 	msr	PSP, r0
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8811 	msr	BASEPRI, r0
 800507a:	f04e 0e0d 	orr.w	lr, lr, #13
 800507e:	4770      	bx	lr

08005080 <pxCurrentTCBConst2>:
 8005080:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005088:	4806      	ldr	r0, [pc, #24]	; (80050a4 <prvPortStartFirstTask+0x1c>)
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f380 8808 	msr	MSP, r0
 8005092:	b662      	cpsie	i
 8005094:	b661      	cpsie	f
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	f3bf 8f6f 	isb	sy
 800509e:	df00      	svc	0
 80050a0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050a2:	bf00      	nop
 80050a4:	e000ed08 	.word	0xe000ed08

080050a8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050ae:	4b31      	ldr	r3, [pc, #196]	; (8005174 <xPortStartScheduler+0xcc>)
 80050b0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	22ff      	movs	r2, #255	; 0xff
 80050be:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	4b29      	ldr	r3, [pc, #164]	; (8005178 <xPortStartScheduler+0xd0>)
 80050d4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80050d6:	4b29      	ldr	r3, [pc, #164]	; (800517c <xPortStartScheduler+0xd4>)
 80050d8:	2207      	movs	r2, #7
 80050da:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050dc:	e009      	b.n	80050f2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80050de:	4b27      	ldr	r3, [pc, #156]	; (800517c <xPortStartScheduler+0xd4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	4a25      	ldr	r2, [pc, #148]	; (800517c <xPortStartScheduler+0xd4>)
 80050e6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fa:	2b80      	cmp	r3, #128	; 0x80
 80050fc:	d0ef      	beq.n	80050de <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050fe:	4b1f      	ldr	r3, [pc, #124]	; (800517c <xPortStartScheduler+0xd4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1c3 0307 	rsb	r3, r3, #7
 8005106:	2b04      	cmp	r3, #4
 8005108:	d009      	beq.n	800511e <xPortStartScheduler+0x76>
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	60bb      	str	r3, [r7, #8]
 800511c:	e7fe      	b.n	800511c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800511e:	4b17      	ldr	r3, [pc, #92]	; (800517c <xPortStartScheduler+0xd4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	021b      	lsls	r3, r3, #8
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <xPortStartScheduler+0xd4>)
 8005126:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005128:	4b14      	ldr	r3, [pc, #80]	; (800517c <xPortStartScheduler+0xd4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005130:	4a12      	ldr	r2, [pc, #72]	; (800517c <xPortStartScheduler+0xd4>)
 8005132:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	b2da      	uxtb	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800513c:	4b10      	ldr	r3, [pc, #64]	; (8005180 <xPortStartScheduler+0xd8>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a0f      	ldr	r2, [pc, #60]	; (8005180 <xPortStartScheduler+0xd8>)
 8005142:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005146:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005148:	4b0d      	ldr	r3, [pc, #52]	; (8005180 <xPortStartScheduler+0xd8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a0c      	ldr	r2, [pc, #48]	; (8005180 <xPortStartScheduler+0xd8>)
 800514e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005152:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005154:	f000 f8b0 	bl	80052b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <xPortStartScheduler+0xdc>)
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800515e:	f7ff ff93 	bl	8005088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005162:	f7ff f8d9 	bl	8004318 <vTaskSwitchContext>
	prvTaskExitError();
 8005166:	f7ff ff4f 	bl	8005008 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800516a:	2300      	movs	r3, #0
}
 800516c:	4618      	mov	r0, r3
 800516e:	3710      	adds	r7, #16
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}
 8005174:	e000e400 	.word	0xe000e400
 8005178:	20000d18 	.word	0x20000d18
 800517c:	20000d1c 	.word	0x20000d1c
 8005180:	e000ed20 	.word	0xe000ed20
 8005184:	2000000c 	.word	0x2000000c

08005188 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80051a0:	4b0e      	ldr	r3, [pc, #56]	; (80051dc <vPortEnterCritical+0x54>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	3301      	adds	r3, #1
 80051a6:	4a0d      	ldr	r2, [pc, #52]	; (80051dc <vPortEnterCritical+0x54>)
 80051a8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80051aa:	4b0c      	ldr	r3, [pc, #48]	; (80051dc <vPortEnterCritical+0x54>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d10e      	bne.n	80051d0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80051b2:	4b0b      	ldr	r3, [pc, #44]	; (80051e0 <vPortEnterCritical+0x58>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d009      	beq.n	80051d0 <vPortEnterCritical+0x48>
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	603b      	str	r3, [r7, #0]
 80051ce:	e7fe      	b.n	80051ce <vPortEnterCritical+0x46>
	}
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bc80      	pop	{r7}
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	2000000c 	.word	0x2000000c
 80051e0:	e000ed04 	.word	0xe000ed04

080051e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051ea:	4b10      	ldr	r3, [pc, #64]	; (800522c <vPortExitCritical+0x48>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <vPortExitCritical+0x22>
 80051f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	607b      	str	r3, [r7, #4]
 8005204:	e7fe      	b.n	8005204 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005206:	4b09      	ldr	r3, [pc, #36]	; (800522c <vPortExitCritical+0x48>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3b01      	subs	r3, #1
 800520c:	4a07      	ldr	r2, [pc, #28]	; (800522c <vPortExitCritical+0x48>)
 800520e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <vPortExitCritical+0x48>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d104      	bne.n	8005222 <vPortExitCritical+0x3e>
 8005218:	2300      	movs	r3, #0
 800521a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005222:	bf00      	nop
 8005224:	370c      	adds	r7, #12
 8005226:	46bd      	mov	sp, r7
 8005228:	bc80      	pop	{r7}
 800522a:	4770      	bx	lr
 800522c:	2000000c 	.word	0x2000000c

08005230 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005230:	f3ef 8009 	mrs	r0, PSP
 8005234:	f3bf 8f6f 	isb	sy
 8005238:	4b0d      	ldr	r3, [pc, #52]	; (8005270 <pxCurrentTCBConst>)
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005240:	6010      	str	r0, [r2, #0]
 8005242:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005246:	f04f 0050 	mov.w	r0, #80	; 0x50
 800524a:	f380 8811 	msr	BASEPRI, r0
 800524e:	f7ff f863 	bl	8004318 <vTaskSwitchContext>
 8005252:	f04f 0000 	mov.w	r0, #0
 8005256:	f380 8811 	msr	BASEPRI, r0
 800525a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800525e:	6819      	ldr	r1, [r3, #0]
 8005260:	6808      	ldr	r0, [r1, #0]
 8005262:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005266:	f380 8809 	msr	PSP, r0
 800526a:	f3bf 8f6f 	isb	sy
 800526e:	4770      	bx	lr

08005270 <pxCurrentTCBConst>:
 8005270:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005274:	bf00      	nop
 8005276:	bf00      	nop

08005278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005290:	f7fe ff84 	bl	800419c <xTaskIncrementTick>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800529a:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <SysTick_Handler+0x3c>)
 800529c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052a0:	601a      	str	r2, [r3, #0]
 80052a2:	2300      	movs	r3, #0
 80052a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	e000ed04 	.word	0xe000ed04

080052b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052bc:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <vPortSetupTimerInterrupt+0x30>)
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <vPortSetupTimerInterrupt+0x34>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052c8:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <vPortSetupTimerInterrupt+0x38>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a09      	ldr	r2, [pc, #36]	; (80052f4 <vPortSetupTimerInterrupt+0x3c>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	4a08      	ldr	r2, [pc, #32]	; (80052f8 <vPortSetupTimerInterrupt+0x40>)
 80052d6:	3b01      	subs	r3, #1
 80052d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052da:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <vPortSetupTimerInterrupt+0x30>)
 80052dc:	2207      	movs	r2, #7
 80052de:	601a      	str	r2, [r3, #0]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bc80      	pop	{r7}
 80052e6:	4770      	bx	lr
 80052e8:	e000e010 	.word	0xe000e010
 80052ec:	e000e018 	.word	0xe000e018
 80052f0:	20000000 	.word	0x20000000
 80052f4:	10624dd3 	.word	0x10624dd3
 80052f8:	e000e014 	.word	0xe000e014

080052fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005302:	f3ef 8305 	mrs	r3, IPSR
 8005306:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b0f      	cmp	r3, #15
 800530c:	d913      	bls.n	8005336 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800530e:	4a15      	ldr	r2, [pc, #84]	; (8005364 <vPortValidateInterruptPriority+0x68>)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005318:	4b13      	ldr	r3, [pc, #76]	; (8005368 <vPortValidateInterruptPriority+0x6c>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	7afa      	ldrb	r2, [r7, #11]
 800531e:	429a      	cmp	r2, r3
 8005320:	d209      	bcs.n	8005336 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	e7fe      	b.n	8005334 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005336:	4b0d      	ldr	r3, [pc, #52]	; (800536c <vPortValidateInterruptPriority+0x70>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800533e:	4b0c      	ldr	r3, [pc, #48]	; (8005370 <vPortValidateInterruptPriority+0x74>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	429a      	cmp	r2, r3
 8005344:	d909      	bls.n	800535a <vPortValidateInterruptPriority+0x5e>
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	e7fe      	b.n	8005358 <vPortValidateInterruptPriority+0x5c>
	}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr
 8005364:	e000e3f0 	.word	0xe000e3f0
 8005368:	20000d18 	.word	0x20000d18
 800536c:	e000ed0c 	.word	0xe000ed0c
 8005370:	20000d1c 	.word	0x20000d1c

08005374 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b08a      	sub	sp, #40	; 0x28
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800537c:	2300      	movs	r3, #0
 800537e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005380:	f7fe fe42 	bl	8004008 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005384:	4b57      	ldr	r3, [pc, #348]	; (80054e4 <pvPortMalloc+0x170>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800538c:	f000 f90c 	bl	80055a8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005390:	4b55      	ldr	r3, [pc, #340]	; (80054e8 <pvPortMalloc+0x174>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4013      	ands	r3, r2
 8005398:	2b00      	cmp	r3, #0
 800539a:	f040 808c 	bne.w	80054b6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01c      	beq.n	80053de <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80053a4:	2208      	movs	r2, #8
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4413      	add	r3, r2
 80053aa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f003 0307 	and.w	r3, r3, #7
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d013      	beq.n	80053de <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f023 0307 	bic.w	r3, r3, #7
 80053bc:	3308      	adds	r3, #8
 80053be:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d009      	beq.n	80053de <pvPortMalloc+0x6a>
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	e7fe      	b.n	80053dc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d068      	beq.n	80054b6 <pvPortMalloc+0x142>
 80053e4:	4b41      	ldr	r3, [pc, #260]	; (80054ec <pvPortMalloc+0x178>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d863      	bhi.n	80054b6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053ee:	4b40      	ldr	r3, [pc, #256]	; (80054f0 <pvPortMalloc+0x17c>)
 80053f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053f2:	4b3f      	ldr	r3, [pc, #252]	; (80054f0 <pvPortMalloc+0x17c>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053f8:	e004      	b.n	8005404 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	429a      	cmp	r2, r3
 800540c:	d903      	bls.n	8005416 <pvPortMalloc+0xa2>
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f1      	bne.n	80053fa <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005416:	4b33      	ldr	r3, [pc, #204]	; (80054e4 <pvPortMalloc+0x170>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800541c:	429a      	cmp	r2, r3
 800541e:	d04a      	beq.n	80054b6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2208      	movs	r2, #8
 8005426:	4413      	add	r3, r2
 8005428:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	6a3b      	ldr	r3, [r7, #32]
 8005430:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	685a      	ldr	r2, [r3, #4]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	1ad2      	subs	r2, r2, r3
 800543a:	2308      	movs	r3, #8
 800543c:	005b      	lsls	r3, r3, #1
 800543e:	429a      	cmp	r2, r3
 8005440:	d91e      	bls.n	8005480 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4413      	add	r3, r2
 8005448:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <pvPortMalloc+0xf4>
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	613b      	str	r3, [r7, #16]
 8005466:	e7fe      	b.n	8005466 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	685a      	ldr	r2, [r3, #4]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800547a:	69b8      	ldr	r0, [r7, #24]
 800547c:	f000 f8f6 	bl	800566c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005480:	4b1a      	ldr	r3, [pc, #104]	; (80054ec <pvPortMalloc+0x178>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	4a18      	ldr	r2, [pc, #96]	; (80054ec <pvPortMalloc+0x178>)
 800548c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800548e:	4b17      	ldr	r3, [pc, #92]	; (80054ec <pvPortMalloc+0x178>)
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b18      	ldr	r3, [pc, #96]	; (80054f4 <pvPortMalloc+0x180>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	429a      	cmp	r2, r3
 8005498:	d203      	bcs.n	80054a2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800549a:	4b14      	ldr	r3, [pc, #80]	; (80054ec <pvPortMalloc+0x178>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a15      	ldr	r2, [pc, #84]	; (80054f4 <pvPortMalloc+0x180>)
 80054a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <pvPortMalloc+0x174>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	431a      	orrs	r2, r3
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054b6:	f7fe fdb5 	bl	8004024 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d009      	beq.n	80054d8 <pvPortMalloc+0x164>
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	e7fe      	b.n	80054d6 <pvPortMalloc+0x162>
	return pvReturn;
 80054d8:	69fb      	ldr	r3, [r7, #28]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3728      	adds	r7, #40	; 0x28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20004928 	.word	0x20004928
 80054e8:	20004934 	.word	0x20004934
 80054ec:	2000492c 	.word	0x2000492c
 80054f0:	20004920 	.word	0x20004920
 80054f4:	20004930 	.word	0x20004930

080054f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d046      	beq.n	8005598 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800550a:	2308      	movs	r3, #8
 800550c:	425b      	negs	r3, r3
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4413      	add	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	4b20      	ldr	r3, [pc, #128]	; (80055a0 <vPortFree+0xa8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4013      	ands	r3, r2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d109      	bne.n	800553a <vPortFree+0x42>
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e7fe      	b.n	8005538 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <vPortFree+0x5e>
 8005542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005546:	f383 8811 	msr	BASEPRI, r3
 800554a:	f3bf 8f6f 	isb	sy
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	60bb      	str	r3, [r7, #8]
 8005554:	e7fe      	b.n	8005554 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <vPortFree+0xa8>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4013      	ands	r3, r2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d019      	beq.n	8005598 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d115      	bne.n	8005598 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <vPortFree+0xa8>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	43db      	mvns	r3, r3
 8005576:	401a      	ands	r2, r3
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800557c:	f7fe fd44 	bl	8004008 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	4b07      	ldr	r3, [pc, #28]	; (80055a4 <vPortFree+0xac>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4413      	add	r3, r2
 800558a:	4a06      	ldr	r2, [pc, #24]	; (80055a4 <vPortFree+0xac>)
 800558c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800558e:	6938      	ldr	r0, [r7, #16]
 8005590:	f000 f86c 	bl	800566c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005594:	f7fe fd46 	bl	8004024 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005598:	bf00      	nop
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20004934 	.word	0x20004934
 80055a4:	2000492c 	.word	0x2000492c

080055a8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ae:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055b2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055b4:	4b27      	ldr	r3, [pc, #156]	; (8005654 <prvHeapInit+0xac>)
 80055b6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d00c      	beq.n	80055dc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3307      	adds	r3, #7
 80055c6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	4a1f      	ldr	r2, [pc, #124]	; (8005654 <prvHeapInit+0xac>)
 80055d8:	4413      	add	r3, r2
 80055da:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055e0:	4a1d      	ldr	r2, [pc, #116]	; (8005658 <prvHeapInit+0xb0>)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055e6:	4b1c      	ldr	r3, [pc, #112]	; (8005658 <prvHeapInit+0xb0>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	4413      	add	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055f4:	2208      	movs	r2, #8
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0307 	bic.w	r3, r3, #7
 8005602:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4a15      	ldr	r2, [pc, #84]	; (800565c <prvHeapInit+0xb4>)
 8005608:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800560a:	4b14      	ldr	r3, [pc, #80]	; (800565c <prvHeapInit+0xb4>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2200      	movs	r2, #0
 8005610:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005612:	4b12      	ldr	r3, [pc, #72]	; (800565c <prvHeapInit+0xb4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	1ad2      	subs	r2, r2, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005628:	4b0c      	ldr	r3, [pc, #48]	; (800565c <prvHeapInit+0xb4>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	4a0a      	ldr	r2, [pc, #40]	; (8005660 <prvHeapInit+0xb8>)
 8005636:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	4a09      	ldr	r2, [pc, #36]	; (8005664 <prvHeapInit+0xbc>)
 800563e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005640:	4b09      	ldr	r3, [pc, #36]	; (8005668 <prvHeapInit+0xc0>)
 8005642:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005646:	601a      	str	r2, [r3, #0]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000d20 	.word	0x20000d20
 8005658:	20004920 	.word	0x20004920
 800565c:	20004928 	.word	0x20004928
 8005660:	20004930 	.word	0x20004930
 8005664:	2000492c 	.word	0x2000492c
 8005668:	20004934 	.word	0x20004934

0800566c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800566c:	b480      	push	{r7}
 800566e:	b085      	sub	sp, #20
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005674:	4b27      	ldr	r3, [pc, #156]	; (8005714 <prvInsertBlockIntoFreeList+0xa8>)
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	e002      	b.n	8005680 <prvInsertBlockIntoFreeList+0x14>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	429a      	cmp	r2, r3
 8005688:	d8f7      	bhi.n	800567a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	68ba      	ldr	r2, [r7, #8]
 8005694:	4413      	add	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d108      	bne.n	80056ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	441a      	add	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d118      	bne.n	80056f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	4b14      	ldr	r3, [pc, #80]	; (8005718 <prvInsertBlockIntoFreeList+0xac>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d00d      	beq.n	80056ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685a      	ldr	r2, [r3, #4]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	441a      	add	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e008      	b.n	80056fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056ea:	4b0b      	ldr	r3, [pc, #44]	; (8005718 <prvInsertBlockIntoFreeList+0xac>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e003      	b.n	80056fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	429a      	cmp	r2, r3
 8005702:	d002      	beq.n	800570a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	bc80      	pop	{r7}
 8005712:	4770      	bx	lr
 8005714:	20004920 	.word	0x20004920
 8005718:	20004928 	.word	0x20004928

0800571c <__libc_init_array>:
 800571c:	b570      	push	{r4, r5, r6, lr}
 800571e:	2500      	movs	r5, #0
 8005720:	4e0c      	ldr	r6, [pc, #48]	; (8005754 <__libc_init_array+0x38>)
 8005722:	4c0d      	ldr	r4, [pc, #52]	; (8005758 <__libc_init_array+0x3c>)
 8005724:	1ba4      	subs	r4, r4, r6
 8005726:	10a4      	asrs	r4, r4, #2
 8005728:	42a5      	cmp	r5, r4
 800572a:	d109      	bne.n	8005740 <__libc_init_array+0x24>
 800572c:	f000 f82e 	bl	800578c <_init>
 8005730:	2500      	movs	r5, #0
 8005732:	4e0a      	ldr	r6, [pc, #40]	; (800575c <__libc_init_array+0x40>)
 8005734:	4c0a      	ldr	r4, [pc, #40]	; (8005760 <__libc_init_array+0x44>)
 8005736:	1ba4      	subs	r4, r4, r6
 8005738:	10a4      	asrs	r4, r4, #2
 800573a:	42a5      	cmp	r5, r4
 800573c:	d105      	bne.n	800574a <__libc_init_array+0x2e>
 800573e:	bd70      	pop	{r4, r5, r6, pc}
 8005740:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005744:	4798      	blx	r3
 8005746:	3501      	adds	r5, #1
 8005748:	e7ee      	b.n	8005728 <__libc_init_array+0xc>
 800574a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800574e:	4798      	blx	r3
 8005750:	3501      	adds	r5, #1
 8005752:	e7f2      	b.n	800573a <__libc_init_array+0x1e>
 8005754:	08005834 	.word	0x08005834
 8005758:	08005834 	.word	0x08005834
 800575c:	08005834 	.word	0x08005834
 8005760:	08005838 	.word	0x08005838

08005764 <memcpy>:
 8005764:	b510      	push	{r4, lr}
 8005766:	1e43      	subs	r3, r0, #1
 8005768:	440a      	add	r2, r1
 800576a:	4291      	cmp	r1, r2
 800576c:	d100      	bne.n	8005770 <memcpy+0xc>
 800576e:	bd10      	pop	{r4, pc}
 8005770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005778:	e7f7      	b.n	800576a <memcpy+0x6>

0800577a <memset>:
 800577a:	4603      	mov	r3, r0
 800577c:	4402      	add	r2, r0
 800577e:	4293      	cmp	r3, r2
 8005780:	d100      	bne.n	8005784 <memset+0xa>
 8005782:	4770      	bx	lr
 8005784:	f803 1b01 	strb.w	r1, [r3], #1
 8005788:	e7f9      	b.n	800577e <memset+0x4>
	...

0800578c <_init>:
 800578c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800578e:	bf00      	nop
 8005790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005792:	bc08      	pop	{r3}
 8005794:	469e      	mov	lr, r3
 8005796:	4770      	bx	lr

08005798 <_fini>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr
